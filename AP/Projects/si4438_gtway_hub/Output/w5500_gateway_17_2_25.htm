<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\w5500_gateway_17_2_25.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\w5500_gateway_17_2_25.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Thu May 18 09:57:14 2017
<BR><P>
<H3>Maximum Stack Usage =      11140 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Iterates_usart2_buffer &rArr; read_Usart2_DMA_FIFO &rArr; uart_frm_proc &rArr; proc_69_data_frm &rArr; proc_68_frm &rArr; proc_68_command_frm &rArr; net_status_proc &rArr; delete_ed_connect &rArr; SWSN_DeleteEDByMAC &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from mrfi.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from mrfi.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from bsp_isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from bsp_isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from usart2_dma_proc.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from usart_isr.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[46]">main</a> from main_swsn_ap.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4e]">nwk_processFreq</a> from nwk_freq.o(.text) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[4c]">nwk_processJoin</a> from nwk_join.o(.text) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[4b]">nwk_processLink</a> from nwk_link.o(.text) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[4f]">nwk_processMgmt</a> from nwk_mgmt.o(.text) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[4a]">nwk_processPing</a> from nwk_ping.o(.text) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[4d]">nwk_processSecurity</a> from nwk_security.o(.text) referenced from nwk_frame.o(.constdata)
 <LI><a href="#[49]">sCB</a> from net_frm_proc.o(.text) referenced from main_swsn_ap.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[2b6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[50]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2b5]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2b7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2b8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2b9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2ba]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2bb]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2bc]"></a>__get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[2bd]"></a>__set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[2be]"></a>__get_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[2bf]"></a>__set_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[2c0]"></a>__REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[2c1]"></a>__REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[e8]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, core_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLocalLinkID
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinfo_to_flash
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoreFactorySettings
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ed_link
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_tx_fail_ed_buffer
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_rx_ed_buffer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_ReplyDelay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Ready
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SendPackage
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsecSem
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BootLoader_State
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_ed_info_in_tx_fail_buffer
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_ed_info_in_rx_buffer
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channr_num_to_flash
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_list_to_flash
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_rx_ed_buffer
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_broad_time_sync
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_frm_proc
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_fail_ed_buffer
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemResetTimes
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMyAddressToFlash
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePerEDToFlash
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gtway_addr
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCodeVersionInfoToFlash
</UL>

<P><STRONG><a name="[ec]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLocalLinkID
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinfo_to_flash
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoreFactorySettings
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ed_link
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_tx_fail_ed_buffer
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_rx_ed_buffer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_ReplyDelay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Ready
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SendPackage
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsecSem
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BootLoader_State
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_ed_info_in_tx_fail_buffer
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_ed_info_in_rx_buffer
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channr_num_to_flash
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_list_to_flash
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_rx_ed_buffer
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_broad_time_sync
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_frm_proc
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_fail_ed_buffer
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemResetTimes
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMyAddressToFlash
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePerEDToFlash
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gtway_addr
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCodeVersionInfoToFlash
</UL>

<P><STRONG><a name="[2c2]"></a>wait</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[fe]"></a>reset_core_system</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, core_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[2c3]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_DMA_Configuration
</UL>

<P><STRONG><a name="[22a]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_DMA_Configuration
</UL>

<P><STRONG><a name="[2c4]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_DMA_Configuration
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ResetCurrDataCounter
</UL>

<P><STRONG><a name="[2c5]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_usart2_buffer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Usart2_DMA_FIFO
</UL>

<P><STRONG><a name="[2c7]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>DMA_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>DMA_GetITStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_PC10_Config
</UL>

<P><STRONG><a name="[2cc]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GpioIsr
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ReadyMode
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[2d0]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinfo_to_flash
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoreFactorySettings
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BootLoader_State
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channr_num_to_flash
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_list_to_flash
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemResetTimes
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMyAddressToFlash
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePerEDToFlash
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gtway_addr
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCodeVersionInfoToFlash
</UL>

<P><STRONG><a name="[2d3]"></a>FLASH_UnlockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinfo_to_flash
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoreFactorySettings
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BootLoader_State
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channr_num_to_flash
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_list_to_flash
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemResetTimes
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMyAddressToFlash
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePerEDToFlash
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gtway_addr
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCodeVersionInfoToFlash
</UL>

<P><STRONG><a name="[2d4]"></a>FLASH_LockBank1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[54]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[56]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinfo_to_flash
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoreFactorySettings
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BootLoader_State
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channr_num_to_flash
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_list_to_flash
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemResetTimes
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMyAddressToFlash
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePerEDToFlash
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gtway_addr
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCodeVersionInfoToFlash
</UL>

<P><STRONG><a name="[57]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[58]"></a>FLASH_WaitForLastBank1Operation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank1Pages
</UL>

<P><STRONG><a name="[59]"></a>FLASH_EraseAllBank1Pages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[5b]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
</UL>

<P><STRONG><a name="[5a]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionStatus
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5c]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePerEDToFlash
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCodeVersionInfoToFlash
</UL>

<P><STRONG><a name="[5d]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinfo_to_flash
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BootLoader_State
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channr_num_to_flash
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_list_to_flash
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemResetTimes
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMyAddressToFlash
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePerEDToFlash
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gtway_addr
</UL>

<P><STRONG><a name="[5e]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5f]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 200 bytes, Stack size 28 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[60]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[61]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2d5]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinfo_to_flash
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoreFactorySettings
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BootLoader_State
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channr_num_to_flash
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_list_to_flash
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemResetTimes
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMyAddressToFlash
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePerEDToFlash
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gtway_addr
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCodeVersionInfoToFlash
</UL>

<P><STRONG><a name="[2da]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[64]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[cb]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_BEEP_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ResetSi4438
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Configuration
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sx1278_GPIO_Inital
</UL>

<P><STRONG><a name="[2db]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead8bit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_func
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[2dc]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_FskConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead8bit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPICmd8bit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Config
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Swith_RX
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ResetSi4438
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_func
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sx1278_GPIO_Inital
</UL>

<P><STRONG><a name="[cc]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_FskConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead8bit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPICmd8bit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Config
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Swith_TX
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ResetSi4438
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_func
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sx1278_GPIO_Inital
</UL>

<P><STRONG><a name="[cf]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TURN_OFF_BEEP
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TURN_ON_BEEP
</UL>

<P><STRONG><a name="[2df]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_PC10_Config
</UL>

<P><STRONG><a name="[2e4]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[e4]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[e5]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[bd]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinfo_to_flash
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoreFactorySettings
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_s
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_list_to_flash
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_pkg
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemResetTimes
</UL>

<P><STRONG><a name="[e6]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[2e5]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>RCC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[65]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[2e8]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>RCC_PREDIV1Config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>RCC_PREDIV2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>RCC_PLL2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>RCC_PLL2Cmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>RCC_PLL3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>RCC_PLL3Cmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>RCC_OTGFSCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>RCC_I2S2CLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>RCC_I2S3CLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
</UL>

<P><STRONG><a name="[f8]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
</UL>

<P><STRONG><a name="[6f]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[228]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_DMA_Configuration
</UL>

<P><STRONG><a name="[a0]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_BEEP_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_PC10_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Configuration
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ResetSi4438
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Configuration
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sx1278_GPIO_Inital
</UL>

<P><STRONG><a name="[a8]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitBoard
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Configuration
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RESET_BOARD
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Configuration
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
</UL>

<P><STRONG><a name="[2fe]"></a>RCC_AHBPeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[6d]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_DeInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[85]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[2ff]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
</UL>

<P><STRONG><a name="[301]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>RTC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
</UL>

<P><STRONG><a name="[68]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[69]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[ef]"></a>RTC_GetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_s
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Get
</UL>

<P><STRONG><a name="[67]"></a>RTC_SetCounter</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Update
</UL>

<P><STRONG><a name="[6a]"></a>RTC_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
</UL>

<P><STRONG><a name="[6b]"></a>RTC_SetAlarm</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>

<P><STRONG><a name="[303]"></a>RTC_GetDivider</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Update
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
</UL>

<P><STRONG><a name="[304]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>RTC_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>RTC_GetITStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[10b]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
</UL>

<P><STRONG><a name="[6e]"></a>I2S_Init</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[306]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
</UL>

<P><STRONG><a name="[308]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1byte_to_sx1278
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_RW
</UL>

<P><STRONG><a name="[142]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1byte_to_sx1278
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_RW
</UL>

<P><STRONG><a name="[30b]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1byte_to_sx1278
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_RW
</UL>

<P><STRONG><a name="[313]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitBoard
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Configuration
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Configuration
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
</UL>

<P><STRONG><a name="[a1]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Configuration
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Configuration
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
</UL>

<P><STRONG><a name="[232]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
</UL>

<P><STRONG><a name="[316]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>TIM_OC4Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[77]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[75]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[73]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[71]"></a>TIM_ICInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_ICInit &rArr; TI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
</UL>

<P><STRONG><a name="[7a]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[319]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Configuration
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Configuration
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
</UL>

<P><STRONG><a name="[31e]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Configuration
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Configuration
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
</UL>

<P><STRONG><a name="[31f]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitBoard
</UL>

<P><STRONG><a name="[7c]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
</UL>

<P><STRONG><a name="[7b]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[7d]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[7f]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[7e]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[80]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[b2]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitBoard
</UL>

<P><STRONG><a name="[322]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitBoard
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
</UL>

<P><STRONG><a name="[328]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[340]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[341]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[345]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
</UL>

<P><STRONG><a name="[346]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[347]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>

<P><STRONG><a name="[34a]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[34c]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[34f]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_usart2_buffer
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_multi_hex_uart2
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_rx_ed_buffer
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[350]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
</UL>

<P><STRONG><a name="[a2]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Configuration
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Configuration
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Configuration
</UL>

<P><STRONG><a name="[82]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Configuration
</UL>

<P><STRONG><a name="[351]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[352]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Configuration
</UL>

<P><STRONG><a name="[d2]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Configuration
</UL>

<P><STRONG><a name="[22b]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_DMA_Configuration
</UL>

<P><STRONG><a name="[354]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[356]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_hex_uart2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_string_uart2
</UL>

<P><STRONG><a name="[359]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35a]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[364]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>WWDG_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_wwdg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[df]"></a>WWDG_SetPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_wwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RESET_BOARD
</UL>

<P><STRONG><a name="[e0]"></a>WWDG_SetWindowValue</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_wwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WWDG_SetWindowValue
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RESET_BOARD
</UL>

<P><STRONG><a name="[367]"></a>WWDG_EnableIT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_wwdg.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>WWDG_SetCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_wwdg.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>WWDG_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_wwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RESET_BOARD
</UL>

<P><STRONG><a name="[369]"></a>WWDG_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_wwdg.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>WWDG_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_wwdg.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>BKP_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
</UL>

<P><STRONG><a name="[36b]"></a>BKP_TamperPinLevelConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>BKP_TamperPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>BKP_ITConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>BKP_RTCOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>BKP_SetRTCCalibrationValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
</UL>

<P><STRONG><a name="[f6]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
</UL>

<P><STRONG><a name="[370]"></a>BKP_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[371]"></a>BKP_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>BKP_GetITStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>BKP_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_NVIC_Configuration
</UL>

<P><STRONG><a name="[9e]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_NVIC_Configuration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_NVIC_Configuration
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_NVIC_Configuration
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_NVIC_Configuration
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
</UL>

<P><STRONG><a name="[9d]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_NVIC_Configuration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_NVIC_Configuration
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_NVIC_Configuration
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_NVIC_Configuration
</UL>

<P><STRONG><a name="[374]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[f5]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
</UL>

<P><STRONG><a name="[376]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[37b]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[37c]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>SEGGER_RTT_Read</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetKey
</UL>

<P><STRONG><a name="[8a]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, segger_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_TerminalOut
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
</UL>

<P><STRONG><a name="[8b]"></a>SEGGER_RTT_WriteString</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, segger_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_TerminalOut
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processLink
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_print_sysinfo
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_usart2_buffer
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaRxPacket
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RXConfi
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Rssiv_judge
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_ON
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_multi_hex_uart2
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_group_buffer
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_print_all_ed_info
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_rx_ed_buffer
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_frm_proc
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_pkg
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Form_Verion_frame
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Usart2_DMA_FIFO
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_init
</UL>

<P><STRONG><a name="[8d]"></a>SEGGER_RTT_GetKey</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WaitKey
</UL>

<P><STRONG><a name="[8e]"></a>SEGGER_RTT_WaitKey</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetKey
</UL>

<P><STRONG><a name="[8f]"></a>SEGGER_RTT_HasKey</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
</UL>

<P><STRONG><a name="[90]"></a>SEGGER_RTT_ConfigUpBuffer</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, segger_rtt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SEGGER_RTT_ConfigUpBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Rssiv_judge
</UL>

<P><STRONG><a name="[91]"></a>SEGGER_RTT_ConfigDownBuffer</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
</UL>

<P><STRONG><a name="[92]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
</UL>

<P><STRONG><a name="[93]"></a>SEGGER_RTT_SetTerminal</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[94]"></a>SEGGER_RTT_TerminalOut</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, segger_rtt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[98]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 504 bytes, Stack size 136 bytes, segger_rtt_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[99]"></a>SEGGER_RTT_printf</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, segger_rtt_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char_no_word_wrap
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char
</UL>

<P><STRONG><a name="[9a]"></a>SEGGER_RTT_put_multi_char</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, segger_rtt_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_print_sysinfo
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_usart2_buffer
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaRxPacket
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Rssiv_judge
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_multi_hex_uart2
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_group_buffer
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_print_all_ed_info
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_rx_ed_buffer
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_frm_proc
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Usart2_DMA_FIFO
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_init
</UL>

<P><STRONG><a name="[9b]"></a>SEGGER_RTT_put_multi_char_no_word_wrap</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, segger_rtt_printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[9c]"></a>TIM1_NVIC_Configuration</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Configuration
</UL>

<P><STRONG><a name="[9f]"></a>TIM1_Configuration</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_NVIC_Configuration
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>

<P><STRONG><a name="[a5]"></a>TIM2_NVIC_Configuration</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[a7]"></a>TIM2_Configuration</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_Configuration &rArr; TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[a9]"></a>EXIT_PC10_Config</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXIT_PC10_Config &rArr; NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[ad]"></a>TIM6_NVIC_Configuration</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Configuration
</UL>

<P><STRONG><a name="[ae]"></a>TIM6_Configuration</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_NVIC_Configuration
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>

<P><STRONG><a name="[af]"></a>RCC_Configuration</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_Configuration &rArr; SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitBoard
</UL>

<P><STRONG><a name="[b0]"></a>BSP_InitBoard</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BSP_InitBoard &rArr; RCC_Configuration &rArr; SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[b4]"></a>BSP_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_Init &rArr; Init_RTC &rArr; Time_Set &rArr; Time_Update &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_initleds
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_BEEP_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitBoard
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>BSP_Delay</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsecSem
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
</UL>

<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, bsp_isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RTC_IRQHandler &rArr; Time_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindAppFrame
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Get
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_ed_info_in_tx_fail_buffer
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_ed_info_in_rx_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bsp_isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TOGGLE_LED4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>delay_init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c6]"></a>delay_ms</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ResetSi4438
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SendPackage
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_s
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Usart2_DMA_FIFO
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_69_data_frm
</UL>

<P><STRONG><a name="[c9]"></a>delay_s</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, delay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[11b]"></a>delay_us</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_RSSI_VALID_WAIT
</UL>

<P><STRONG><a name="[ca]"></a>Sx1278_GPIO_Inital</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, bsp_leds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sx1278_GPIO_Inital &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[b6]"></a>bsp_initleds</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_leds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[172]"></a>BSP_TURN_ON_LED1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_leds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37d]"></a>BSP_TURN_OFF_LED1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_leds.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>BSP_TOGGLE_LED1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_leds.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>BSP_TURN_ON_LED2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_leds.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>BSP_TURN_OFF_LED2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_leds.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>BSP_TOGGLE_LED2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_leds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sCB
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[381]"></a>BSP_TURN_ON_LED4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_leds.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>BSP_TURN_OFF_LED4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_leds.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>BSP_TOGGLE_LED4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_leds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>BSP_BEEP_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32_beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_BEEP_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[ce]"></a>BSP_TURN_ON_BEEP</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32_beep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>

<P><STRONG><a name="[d0]"></a>BSP_TURN_OFF_BEEP</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32_beep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>

<P><STRONG><a name="[aa]"></a>NVIC_Configuration</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32_it_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_PC10_Config
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[d1]"></a>Usart2_Configuration</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32_usart2_gtway.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Usart2_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_69_data_frm
</UL>

<P><STRONG><a name="[d4]"></a>USART2_NVIC_Configuration</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32_usart2_gtway.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_69_data_frm
</UL>

<P><STRONG><a name="[d5]"></a>put_string_uart2</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32_usart2_gtway.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char_uart2
</UL>

<P><STRONG><a name="[d7]"></a>put_char_uart2</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32_usart2_gtway.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_string_uart2
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_multi_char_uart2
</UL>

<P><STRONG><a name="[d8]"></a>put_multi_char_uart2</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32_usart2_gtway.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_char_uart2
</UL>

<P><STRONG><a name="[d9]"></a>put_hex_uart2</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32_usart2_gtway.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = put_hex_uart2
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_multi_hex_uart2
</UL>

<P><STRONG><a name="[da]"></a>put_multi_hex_uart2</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32_usart2_gtway.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = put_multi_hex_uart2 &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_hex_uart2
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_gtway_msg_to_uart
</UL>

<P><STRONG><a name="[dc]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32_usart2_gtway.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>

<P><STRONG><a name="[de]"></a>BSP_RESET_BOARD</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32_reset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_RESET_BOARD &rArr; WWDG_SetWindowValue
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_SetWindowValue
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_SetPrescaler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_heart_frm
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_broad_time_sync
</UL>

<P><STRONG><a name="[e2]"></a>IWDG_Config</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32_reset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>FLASH_WriteByte</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, stm32_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FLASH_WriteByte &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_88_data_frm
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_save
</UL>

<P><STRONG><a name="[383]"></a>FLASH_ReadByte</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32_flash.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>FLASH_EraseOnePage</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_deInit
</UL>

<P><STRONG><a name="[ee]"></a>Set_BootLoader_State</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Set_BootLoader_State &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_88_data_frm
</UL>

<P><STRONG><a name="[384]"></a>Read_BootLoader_State</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_flash.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>RTC_Get_Week</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, stm32_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Get
</UL>

<P><STRONG><a name="[f0]"></a>Is_Leap_Year</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Update
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Get
</UL>

<P><STRONG><a name="[bf]"></a>Time_Get</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, stm32_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Time_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>Time_Update</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, stm32_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Time_Update &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
</UL>

<P><STRONG><a name="[f4]"></a>get_week</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
</UL>

<P><STRONG><a name="[f3]"></a>Time_Set</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, stm32_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Time_Set &rArr; Time_Update &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_week
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RTC
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_gtway_time
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_proc
</UL>

<P><STRONG><a name="[b8]"></a>Init_RTC</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Init_RTC &rArr; Time_Set &rArr; Time_Update &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[fd]"></a>get_time_s</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
</UL>

<P><STRONG><a name="[256]"></a>set_week</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_proc
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_time_sync_pkg
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NMI_Handler &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_core_system
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HardFault_Handler &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_core_system
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MemManage_Handler &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_core_system
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BusFault_Handler &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_core_system
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UsageFault_Handler &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_core_system
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SVC_Handler &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_core_system
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DebugMon_Handler &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_core_system
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PendSV_Handler &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_core_system
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_core_system
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>MRFI_Ready</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MRFI_Ready &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Standby
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_unlink
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ReadyMode
</UL>

<P><STRONG><a name="[103]"></a>Mrfi_GetCurrentState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mrfi_GetCurrentState &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_broad_time_sync
</UL>

<P><STRONG><a name="[105]"></a>RE_ON</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaEntryRx
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Swith_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
</UL>

<P><STRONG><a name="[108]"></a>MRFI_RxOn</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_unlink
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetChannelNum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiMasterTransmitByte
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_broad_time_sync
</UL>

<P><STRONG><a name="[10f]"></a>SX1276_Parameters_Select</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, mrfi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[10e]"></a>KeyRead</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, mrfi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[109]"></a>mrfiSpiInit</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mrfiSpiInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[10c]"></a>MRFI_Init</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MRFI_Init &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_PC10_Config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfiSpiInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyRead
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Parameters_Select
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetCurrentState
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Ready
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sx1278_GPIO_Inital
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiMasterTransmitByte
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_broad_time_sync
</UL>

<P><STRONG><a name="[113]"></a>MRFI_RandomByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mrfi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_pingInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgmtInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_linkInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_frameInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RandomBackoffDelay
</UL>

<P><STRONG><a name="[114]"></a>TX_func</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TX_func &rArr; SX1276_LoRaEntryTx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Standby
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaTxPacket
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaEntryTx
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaClearIrq
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Swith_TX
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>

<P><STRONG><a name="[119]"></a>Lora_Rssiv_judge</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_RSSI_VALID_WAIT
</UL>

<P><STRONG><a name="[11a]"></a>Lora_RSSI_VALID_WAIT</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Rssiv_judge
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>

<P><STRONG><a name="[11c]"></a>MRFI_Transmit</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaRx_On
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Swith_RX
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_RSSI_VALID_WAIT
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_func
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetCurrentState
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Ready
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RandomBackoffDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_SendEmptyPollRspFrame
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_replayRmoterFrame
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendAckReply
</UL>

<P><STRONG><a name="[11e]"></a>MRFI_Receive</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MRFI_Receive &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
</UL>

<P><STRONG><a name="[120]"></a>MRFI_RxAddrIsFiltered</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MRFI_RxAddrIsFiltered
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RXConfi
</UL>

<P><STRONG><a name="[11f]"></a>Mrfi_RXConfi</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Mrfi_RXConfi &rArr; MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxAddrIsFiltered
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>MRFI_Sleep</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MRFI_Sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_unlink
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
</UL>

<P><STRONG><a name="[1a4]"></a>MRFI_WakeUp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mrfi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_unlink
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[124]"></a>MRFI_GpioIsr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SyncPinRxIsr
</UL>

<P><STRONG><a name="[12a]"></a>Mrfi_SpiGetResponse</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_SpiWriteByte
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_SpiReadBytes
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_SpiReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiWaitforCTS
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCmdGetResp
</UL>

<P><STRONG><a name="[12c]"></a>Mrfi_SpiSendCommand</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Mrfi_SpiSendCommand &rArr; mrfi_SpiWriteBytes &rArr; mrfi_SpiWriteByte &rArr; bsp_SpiMasterTransmitByte &rArr; MRFI_Init &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_SpiWriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SetProperty
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCmdGetResp
</UL>

<P><STRONG><a name="[12d]"></a>Mrfi_SpiSendCmdGetResp</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCommand
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiGetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetProperty
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ClearAllPacketHandlerFlags
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_StartRx
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetTxFifoSpace
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetRxFifoCount
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ResetRxFifo
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ConfigurationInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetPartInfo
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ChangeToReadyState
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ClearAllInterruptFlags
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ResetTxFifo
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_StartTx
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_IsRssiExceededThreshold
</UL>

<P><STRONG><a name="[12e]"></a>Mrfi_IsRssiExceededThreshold</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCmdGetResp
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RSSI_VALID_WAIT
</UL>

<P><STRONG><a name="[130]"></a>Mrfi_GetCurrentRSSI</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mrfi_GetCurrentRSSI &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
</UL>

<P><STRONG><a name="[131]"></a>MRFI_Rssi</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MRFI_Rssi &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetCurrentRSSI
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
</UL>

<P><STRONG><a name="[133]"></a>MRFI_DelayMs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MRFI_DelayMs &rArr; Mrfi_DelayUsec &rArr; BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_replayFrame
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_DELAY
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_WaitForTransmitDone
</UL>

<P><STRONG><a name="[134]"></a>MRFI_ReplyDelay</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MRFI_ReplyDelay &rArr; Mrfi_DelayUsecSem &rArr; BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsecSem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_unlink
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
</UL>

<P><STRONG><a name="[198]"></a>MRFI_PostKillSem</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mrfi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processLink
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processJoin
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
</UL>

<P><STRONG><a name="[1a7]"></a>MRFI_GetRadioState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mrfi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_unlink
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
</UL>

<P><STRONG><a name="[138]"></a>Mrfi_StartTx</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCmdGetResp
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SendPackage
</UL>

<P><STRONG><a name="[139]"></a>Mrfi_SpiWriteData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_SpiWriteBytes
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_SpiWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_WriteTxFifo
</UL>

<P><STRONG><a name="[13a]"></a>Mrfi_WriteTxFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SendPackage
</UL>

<P><STRONG><a name="[13b]"></a>Mrfi_ResetTxFifo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCmdGetResp
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SendPackage
</UL>

<P><STRONG><a name="[13c]"></a>Mrfi_ClearAllInterruptFlags</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCmdGetResp
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SendPackage
</UL>

<P><STRONG><a name="[13d]"></a>Mrfi_ChangeToReadyState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCmdGetResp
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SendPackage
</UL>

<P><STRONG><a name="[13f]"></a>SPI_NRF_RW</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiReadData
</UL>

<P><STRONG><a name="[143]"></a>Mrfi_SpiReadData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_RW
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_SpiWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetLatchedRSSI
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ReadRxFifo
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetPacketHandlerStatus
</UL>

<P><STRONG><a name="[144]"></a>Mrfi_GetPacketHandlerStatus</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_WaitForTransmitDone
</UL>

<P><STRONG><a name="[146]"></a>Mrfi_GetPartInfo</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCmdGetResp
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_TestSPI
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_version
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_partnum
</UL>

<P><STRONG><a name="[147]"></a>MRFI_TestSPI</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetPartInfo
</UL>

<P><STRONG><a name="[25d]"></a>MRFI_getFrameTransmissionCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_broad_time_sync
</UL>

<P><STRONG><a name="[385]"></a>MRFI_getFrameReceiveCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mrfi.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>MRFI_SetChannelNum</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MRFI_SetChannelNum &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetLogicalChannel
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_proc
</UL>

<P><STRONG><a name="[27c]"></a>MRFI_GetChannelNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mrfi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_proc
</UL>

<P><STRONG><a name="[149]"></a>Mrfi_ConfigurationInit</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCmdGetResp
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_InitRadioRegisters
</UL>

<P><STRONG><a name="[14c]"></a>Mrfi_SpiWaitforCTS</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiGetResponse
</UL>

<P><STRONG><a name="[14d]"></a>Mrfi_ResetSi4438</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[14e]"></a>Mrfi_ResetRxFifo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCmdGetResp
</UL>

<P><STRONG><a name="[14f]"></a>Mrfi_GetRxFifoCount</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCmdGetResp
</UL>

<P><STRONG><a name="[150]"></a>Mrfi_GetTxFifoSpace</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCmdGetResp
</UL>

<P><STRONG><a name="[151]"></a>Mrfi_ReadRxFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiReadData
</UL>

<P><STRONG><a name="[152]"></a>Mrfi_StartRx</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCmdGetResp
</UL>

<P><STRONG><a name="[153]"></a>Mrfi_ClearAllPacketHandlerFlags</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCmdGetResp
</UL>

<P><STRONG><a name="[154]"></a>Mrfi_SetProperty</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Mrfi_SetProperty &rArr; Mrfi_SpiSendCommand &rArr; mrfi_SpiWriteBytes &rArr; mrfi_SpiWriteByte &rArr; bsp_SpiMasterTransmitByte &rArr; MRFI_Init &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SetPaPower
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whiting_proc
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviatn_proc
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manchter_proc
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_proc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_proc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chanspc_proc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modformat_proc
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpw_proc
</UL>

<P><STRONG><a name="[155]"></a>Mrfi_SetPaPower</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Mrfi_SetPaPower &rArr; Mrfi_SetProperty &rArr; Mrfi_SpiSendCommand &rArr; mrfi_SpiWriteBytes &rArr; mrfi_SpiWriteByte &rArr; bsp_SpiMasterTransmitByte &rArr; MRFI_Init &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SetProperty
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
</UL>

<P><STRONG><a name="[156]"></a>Mrfi_GetLatchedRSSI</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiReadData
</UL>

<P><STRONG><a name="[157]"></a>Mrfi_GetProperty</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCmdGetResp
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whiting_proc
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviatn_proc
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manchter_proc
</UL>

<P><STRONG><a name="[158]"></a>MRFI_SetLogicalChannel</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetChannelNum
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Ready
</UL>

<P><STRONG><a name="[159]"></a>MRFI_SetRFPwr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MRFI_SetRFPwr &rArr; Mrfi_SetPaPower &rArr; Mrfi_SetProperty &rArr; Mrfi_SpiSendCommand &rArr; mrfi_SpiWriteBytes &rArr; mrfi_SpiWriteByte &rArr; bsp_SpiMasterTransmitByte &rArr; MRFI_Init &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SetPaPower
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
</UL>

<P><STRONG><a name="[386]"></a>MRFI_SetRxAddrFilter</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mrfi.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>MRFI_EnableRxAddrFilter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mrfi.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>MRFI_DisableRxAddrFilter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mrfi.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = EXTI15_10_IRQHandler &rArr; Mrfi_RXConfi &rArr; MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaRxPacket
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RXConfi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[389]"></a>delayms</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sx1276-lora.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>RF_IRQ_DS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276-lora.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>RF_IRQ_EN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276-lora.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>SW_Swith_RX</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SW_Swith_RX
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_ON
</UL>

<P><STRONG><a name="[115]"></a>SW_Swith_TX</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SW_Swith_TX
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_func
</UL>

<P><STRONG><a name="[15c]"></a>SPICmd8bit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sx1276-lora.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[15d]"></a>SPIRead8bit</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sx1276-lora.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[15e]"></a>write1byte_to_sx1278</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOneByte
</UL>

<P><STRONG><a name="[15f]"></a>ReadOneByte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1byte_to_sx1278
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>

<P><STRONG><a name="[104]"></a>SPIRead</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Radio_Txpower
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Radio_mode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaRxWaitStable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Standby
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaRxPacket
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaEntryTx
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaEntryRx
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Config
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetCurrentRSSI
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RXConfi
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Rssiv_judge
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetCurrentState
</UL>

<P><STRONG><a name="[160]"></a>SPIWrite</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPIWrite &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1byte_to_sx1278
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_FskTxPacket
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_FskEntryTx
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_FskEntryRx
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_FskClearFIFO
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_FskConfig
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_EntryLoRa
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Sleep
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Standby
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaTxPacket
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaRx_On
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaRxPacket
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaEntryTx
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaEntryRx
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaClearIrq
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Config
</UL>

<P><STRONG><a name="[161]"></a>SX1276ReadFifo</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276ReadFifo &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1byte_to_sx1278
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIBurstRead
</UL>

<P><STRONG><a name="[162]"></a>SPIBurstRead</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIBurstRead &rArr; SX1276ReadFifo &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaRxPacket
</UL>

<P><STRONG><a name="[163]"></a>SX1276WriteFifo</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276WriteFifo &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1byte_to_sx1278
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurstWrite
</UL>

<P><STRONG><a name="[164]"></a>BurstWrite</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BurstWrite &rArr; SX1276WriteFifo &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_FskTxPacket
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaTxPacket
</UL>

<P><STRONG><a name="[102]"></a>SX1276_Standby</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_FskTxPacket
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_FskConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaRx_On
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaEntryTx
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaEntryRx
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_func
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Ready
</UL>

<P><STRONG><a name="[165]"></a>SX1276_Sleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276_Sleep &rArr; SPIWrite &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_FskConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Config
</UL>

<P><STRONG><a name="[166]"></a>SX1276_EntryLoRa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276_EntryLoRa &rArr; SPIWrite &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Config
</UL>

<P><STRONG><a name="[118]"></a>SX1276_LoRaClearIrq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1276_LoRaClearIrq &rArr; SPIWrite &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaRx_On
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaRxPacket
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaEntryTx
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaEntryRx
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_func
</UL>

<P><STRONG><a name="[110]"></a>SX1276_Config</STRONG> (Thumb, 370 bytes, Stack size 16 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1276_Config &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_EntryLoRa
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Sleep
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Standby
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
</UL>

<P><STRONG><a name="[107]"></a>SX1276_LoRaEntryRx</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Standby
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaClearIrq
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_ON
</UL>

<P><STRONG><a name="[167]"></a>SX1276_LoRaRxWaitStable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276-lora.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>

<P><STRONG><a name="[15b]"></a>SX1276_LoRaRxPacket</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SX1276_LoRaRxPacket &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIBurstRead
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaClearIrq
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>SX1276_LoRaEntryTx</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276_LoRaEntryTx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Standby
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaClearIrq
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_func
</UL>

<P><STRONG><a name="[117]"></a>SX1276_LoRaTxPacket</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1276_LoRaTxPacket &rArr; BurstWrite &rArr; SX1276WriteFifo &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurstWrite
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_func
</UL>

<P><STRONG><a name="[168]"></a>SX1276_FskConfig</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, sx1276-lora.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Sleep
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Standby
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_FskEntryTx
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_FskEntryRx
</UL>

<P><STRONG><a name="[169]"></a>SX1276_FskClearFIFO</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1276-lora.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>

<P><STRONG><a name="[16a]"></a>SX1276_FskEntryRx</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sx1276-lora.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_FskConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>

<P><STRONG><a name="[38c]"></a>SX1276_FskRxPacket</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1276-lora.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>SX1276_FskEntryTx</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sx1276-lora.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_FskConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
</UL>

<P><STRONG><a name="[16c]"></a>SX1276_FskTxPacket</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sx1276-lora.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BurstWrite
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Standby
</UL>

<P><STRONG><a name="[11d]"></a>SX1276_LoRaRx_On</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1276_LoRaRx_On &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIWrite
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Standby
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaClearIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>

<P><STRONG><a name="[27e]"></a>Get_Radio_fre</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sx1276-lora.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_proc
</UL>

<P><STRONG><a name="[38d]"></a>Get_Radio_Rate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276-lora.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>Get_Radio_mode</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Get_Radio_mode &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modformat_proc
</UL>

<P><STRONG><a name="[16e]"></a>Get_Radio_Txpower</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, sx1276-lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Get_Radio_Txpower &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIRead
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpw_proc
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, main_swsn_ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 11140<LI>Call Chain = main &rArr; Iterates_usart2_buffer &rArr; read_Usart2_DMA_FIFO &rArr; uart_frm_proc &rArr; proc_69_data_frm &rArr; proc_68_frm &rArr; proc_68_command_frm &rArr; net_status_proc &rArr; delete_ed_connect &rArr; SWSN_DeleteEDByMAC &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_67frm_to_ed_tx_buffer
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoreFactorySettings
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_bcast_frm
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isExistDuplicateLinkED
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_clearDuplicateLinkFlag
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ed_link
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_list
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFirmwareInfo
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_DMA_Configuration
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_checkDuplicateLinkEdIPList
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_usart2_buffer
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_tx_fail_ed_buffer
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_tx_ed_buffer
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_rx_ed_buffer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RESET_BOARD
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_NVIC_Configuration
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Configuration
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TOGGLE_LED2
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TURN_ON_LED1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[180]"></a>nwk_nwkInit</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = nwk_nwkInit &rArr; nwk_joinInit &rArr; nwk_joinList_init &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_securityInit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_pingInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_mgmtInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_linkInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_globalsInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freqInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_frameInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[18d]"></a>nwk_getNextConnection</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nwk_getNextConnection &rArr; initializeConnection &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Commission
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[1ba]"></a>nwk_freeConnection</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nwk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_unlink
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_connectionControl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Commission
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_unlink_reply
</UL>

<P><STRONG><a name="[18e]"></a>nwk_getConnInfo</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_lid2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_unlink
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_connectionControl
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getAddressByLinkId
</UL>

<P><STRONG><a name="[18f]"></a>nwk_isLinkDuplicate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_isLinkDuplicate &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[191]"></a>nwk_findAddressMatch</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nwk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[192]"></a>nwk_getLinkIdByAddress</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nwk_getLinkIdByAddress &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_ip_addr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_ed_connect
</UL>

<P><STRONG><a name="[193]"></a>nwk_getAddressByLinkId</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nwk_getAddressByLinkId &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_checkDuplicateLinkEdIPList
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_net_list
</UL>

<P><STRONG><a name="[1f1]"></a>nwk_getSFInfoPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
</UL>

<P><STRONG><a name="[194]"></a>nwk_saveJoinedDevice</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_saveJoinedDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[195]"></a>nwk_findAlreadyJoined</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nwk_findAlreadyJoined &rArr; initializeConnection &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeConnection
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[1ab]"></a>nwk_checkConnInfo</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nwk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
</UL>

<P><STRONG><a name="[196]"></a>nwk_isConnectionValid</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendAckReply
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>

<P><STRONG><a name="[199]"></a>nwk_allocateLocalRxPort</STRONG> (Thumb, 224 bytes, Stack size 128 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = nwk_allocateLocalRxPort &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[19b]"></a>nwk_isValidReply</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nwk_isValidReply &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processLink
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processJoin
</UL>

<P><STRONG><a name="[19d]"></a>nwk_findPeer</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_findPeer &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_unlink_reply
</UL>

<P><STRONG><a name="[207]"></a>nwk_checkAppMsgTID</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nwk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
</UL>

<P><STRONG><a name="[19e]"></a>nwk_getNumObjectFromMsg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nwk_getNumObjectFromMsg &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[1a0]"></a>nwk_putNumObjectIntoMsg</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nwk_putNumObjectIntoMsg &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[1c1]"></a>nwk_NVObj</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[1a1]"></a>nwk_resetUnlinkedED</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_resetUnlinkedED
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ed_link
</UL>

<P><STRONG><a name="[38e]"></a>nwk_resetlinkedED</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nwk.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>nwk_getEDState</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_getEDState
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_net_info
</UL>

<P><STRONG><a name="[1a2]"></a>nwk_getEDbasicInfo</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nwk_getEDbasicInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_lid2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ed_info
</UL>

<P><STRONG><a name="[1a3]"></a>SMPL_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = SMPL_Init &rArr; nwk_nwkInit &rArr; nwk_joinInit &rArr; nwk_joinList_init &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_join
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_init
</UL>

<P><STRONG><a name="[1a6]"></a>SMPL_LinkListen</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SMPL_LinkListen &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setListenContext
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLocalLinkID
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GetRadioState
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_DelayMs
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_LinkListen
</UL>

<P><STRONG><a name="[1aa]"></a>SMPL_SendOpt</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = SMPL_SendOpt &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildAckReqFrame
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_checkConnInfo
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GetRadioState
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_ReplyDelay
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bcast_msg
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_user_msg
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Send
</UL>

<P><STRONG><a name="[1b0]"></a>SMPL_Send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nwk_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
</UL>

<P><STRONG><a name="[1b1]"></a>SMPL_Receive</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SMPL_Receive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_checkConnInfo
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_bcast_msg
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_user_msg
</UL>

<P><STRONG><a name="[1b3]"></a>SMPL_Link</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nwk_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
</UL>

<P><STRONG><a name="[1b5]"></a>SMPL_Unlink</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nwk_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_unlink
</UL>

<P><STRONG><a name="[1b7]"></a>SMPL_Ping</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nwk_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
</UL>

<P><STRONG><a name="[1b9]"></a>SMPL_Commission</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, nwk_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnection
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNextConnection
</UL>

<P><STRONG><a name="[1bb]"></a>SMPL_Ioctl</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = SMPL_Ioctl &rArr; nwk_rawSend &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setLinkToken
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setJoinToken
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawSend
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawReceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_radioControl
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinContext
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getProtocolVersion
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLinkToken
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getJoinToken
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getFWVersion
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceType
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceIPAddress
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceAddress
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_connectionControl
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctlPreInitAccessIsOK
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_NVObj
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_unlink
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_ping
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_DeleteEDByLid
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getRemoterRssi
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getEDRssi
</UL>

<P><STRONG><a name="[1cc]"></a>nwk_getEDRssi</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = nwk_getEDRssi &rArr; SMPL_Ioctl &rArr; nwk_rawSend &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rssi
</UL>

<P><STRONG><a name="[1cd]"></a>nwk_getRemoterRssi</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nwk_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[1ce]"></a>recv_user_msg</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = recv_user_msg &rArr; SMPL_Receive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_rx_ed_buffer
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_frm_proc
</UL>

<P><STRONG><a name="[1cf]"></a>recv_bcast_msg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = recv_bcast_msg &rArr; SMPL_Receive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_bcast_frm
</UL>

<P><STRONG><a name="[1d0]"></a>send_user_msg</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = send_user_msg &rArr; SMPL_SendOpt &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_pkg
</UL>

<P><STRONG><a name="[1d1]"></a>send_bcast_msg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = send_bcast_msg &rArr; SMPL_SendOpt &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bcast_pkg
</UL>

<P><STRONG><a name="[1d2]"></a>SWSN_DELAY</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SWSN_DELAY &rArr; MRFI_DelayMs &rArr; Mrfi_DelayUsec &rArr; BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_print_sysinfo
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_print_all_ed_info
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_pkg
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bcast_frm
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_init
</UL>

<P><STRONG><a name="[170]"></a>SWSN_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = SWSN_init &rArr; SMPL_Init &rArr; nwk_nwkInit &rArr; nwk_joinInit &rArr; nwk_joinList_init &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d3]"></a>sysinfo_to_flash</STRONG> (Thumb, 720 bytes, Stack size 6160 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6180<LI>Call Chain = sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_DeleteEDByMAC
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_list
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_deleteInnetED
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_net_list
</UL>

<P><STRONG><a name="[1d4]"></a>refresh_info_in_sysinfo</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = refresh_info_in_sysinfo
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinfo_from_flash
</UL>

<P><STRONG><a name="[1d5]"></a>sysinfo_from_flash</STRONG> (Thumb, 600 bytes, Stack size 6152 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6168<LI>Call Chain = sysinfo_from_flash &rArr; refresh_info_in_sysinfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_info_in_sysinfo
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_list
</UL>

<P><STRONG><a name="[1d6]"></a>SEGGER_RTT_print_sysinfo</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SEGGER_RTT_print_sysinfo &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_DELAY
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_list
</UL>

<P><STRONG><a name="[1d7]"></a>SWSN_LinkListen</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SWSN_LinkListen &rArr; SMPL_LinkListen &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ed_link
</UL>

<P><STRONG><a name="[1d8]"></a>SWSN_DeleteEDByLid</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = SWSN_DeleteEDByLid &rArr; SMPL_Ioctl &rArr; nwk_rawSend &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_deleteInnetED
</UL>

<P><STRONG><a name="[1d9]"></a>SWSN_DeleteEDByMAC</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nwk_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6196<LI>Call Chain = SWSN_DeleteEDByMAC &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinfo_to_flash
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_ed_connect
</UL>

<P><STRONG><a name="[182]"></a>nwk_frameInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nwk_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_frameInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[1ac]"></a>nwk_buildFrame</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, nwk_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nwk_buildFrame &rArr; nwk_QfindSlot &rArr; nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindSlot
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawSend
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildAckReqFrame
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_ping_reply
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_unlink_reply
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[1ad]"></a>nwk_buildAckReqFrame</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, nwk_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nwk_buildAckReqFrame &rArr; nwk_buildFrame &rArr; nwk_QfindSlot &rArr; nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
</UL>

<P><STRONG><a name="[1db]"></a>isDupSandFFrame</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, nwk_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = isDupSandFFrame &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getQ
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>

<P><STRONG><a name="[1dd]"></a>nwk_replayRmoterFrame</STRONG> (Thumb, 34 bytes, Stack size 80 bytes, nwk_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = nwk_replayRmoterFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
</UL>

<P><STRONG><a name="[121]"></a>MRFI_RxCompleteISR</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nwk_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = MRFI_RxCompleteISR &rArr; dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_isFound
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getRemoterAddress
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindSlot
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Receive
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RXConfi
</UL>

<P><STRONG><a name="[1b2]"></a>nwk_retrieveFrame</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, nwk_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawReceive
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Receive
</UL>

<P><STRONG><a name="[1af]"></a>nwk_sendFrame</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nwk_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_replayFrame
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_rawSend
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_ping_reply
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_unlink_reply
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[200]"></a>nwk_getMyRxType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_frame.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[197]"></a>nwk_sendAckReply</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, nwk_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = nwk_sendAckReply &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
</UL>

<P><STRONG><a name="[1e5]"></a>nwk_replayFrame</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nwk_frame.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_DelayMs
</UL>

<P><STRONG><a name="[1e6]"></a>nwk_getSandFFrame</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, nwk_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nwk_getSandFFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getQ
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
</UL>

<P><STRONG><a name="[1e7]"></a>nwk_SendEmptyPollRspFrame</STRONG> (Thumb, 214 bytes, Stack size 80 bytes, nwk_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = nwk_SendEmptyPollRspFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
</UL>

<P><STRONG><a name="[25c]"></a>nwk_getFrameReceiveCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_frame.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_broad_time_sync
</UL>

<P><STRONG><a name="[181]"></a>nwk_globalsInit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, nwk_globals.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[19c]"></a>nwk_getMyAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nwk_globals.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceAddress
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_frameInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ap_mac
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_time_sync_pkg
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_check_link_pkg
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getAPandTotalEDInfor
</UL>

<P><STRONG><a name="[1eb]"></a>nwk_getMyType</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nwk_globals.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceType
</UL>

<P><STRONG><a name="[1ca]"></a>nwk_getFWVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nwk_globals.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[1cb]"></a>nwk_getProtocolVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nwk_globals.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[1ea]"></a>nwk_setMyAddress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nwk_globals.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceAddress
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadMyAddressFromFlash
</UL>

<P><STRONG><a name="[1ec]"></a>nwk_setMyType</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nwk_globals.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceType
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadMyAddressFromFlash
</UL>

<P><STRONG><a name="[38f]"></a>nwk_setAPAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nwk_globals.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>nwk_getAPAddress</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nwk_globals.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[18a]"></a>nwk_getBCastAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nwk_globals.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_link
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_info_in_sysinfo
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[1df]"></a>nwk_getRemoterAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nwk_globals.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
</UL>

<P><STRONG><a name="[1ed]"></a>nwk_getMyIPAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nwk_globals.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceIPAddress
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_assignIP
</UL>

<P><STRONG><a name="[1ee]"></a>nwk_setMyIPAddress</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nwk_globals.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_deviceIPAddress
</UL>

<P><STRONG><a name="[183]"></a>nwk_QInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nwk_qmgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[1e4]"></a>nwk_QadjustOrder</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, nwk_qmgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindSlot
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
</UL>

<P><STRONG><a name="[1da]"></a>nwk_QfindSlot</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, nwk_qmgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nwk_QfindSlot &rArr; nwk_QadjustOrder
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
</UL>

<P><STRONG><a name="[1e3]"></a>nwk_QfindOldest</STRONG> (Thumb, 322 bytes, Stack size 72 bytes, nwk_qmgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSandFFrame
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
</UL>

<P><STRONG><a name="[1dc]"></a>nwk_getQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nwk_qmgmt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSandFFrame
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDupSandFFrame
</UL>

<P><STRONG><a name="[c0]"></a>nwk_QfindAppFrame</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nwk_qmgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_QfindAppFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>nwk_freqInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nwk_freq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[4e]"></a>nwk_processFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_freq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[1c6]"></a>nwk_rawSend</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nwk_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = nwk_rawSend &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[1c7]"></a>nwk_rawReceive</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nwk_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nwk_rawReceive &rArr; nwk_retrieveFrame &rArr; nwk_QfindOldest &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[1c8]"></a>nwk_radioControl</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, nwk_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nwk_radioControl &rArr; MRFI_SetRFPwr &rArr; Mrfi_SetPaPower &rArr; Mrfi_SetProperty &rArr; Mrfi_SpiSendCommand &rArr; mrfi_SpiWriteBytes &rArr; mrfi_SpiWriteByte &rArr; bsp_SpiMasterTransmitByte &rArr; MRFI_Init &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetRFPwr
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Rssi
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[1c9]"></a>nwk_joinContext</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nwk_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_joinContext
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setJoinContext
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[1c3]"></a>nwk_deviceAddress</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nwk_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nwk_deviceAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setMyAddress
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[1c4]"></a>nwk_deviceType</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nwk_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nwk_deviceType
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setMyType
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyType
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[1c5]"></a>nwk_deviceIPAddress</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nwk_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nwk_deviceIPAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setMyIPAddress
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyIPAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[1c2]"></a>nwk_connectionControl</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, nwk_ioctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nwk_connectionControl &rArr; nwk_getConnInfo &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnection
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[186]"></a>nwk_joinInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nwk_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nwk_joinInit &rArr; nwk_joinList_init &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setLinkToken
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSFInfoPtr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateLinkToken
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[1bf]"></a>nwk_setJoinToken</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nwk_join.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[1c0]"></a>nwk_getJoinToken</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nwk_join.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[1ae]"></a>nwk_isSandFClient</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nwk_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_isSandFClient &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_SendOpt
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[1a5]"></a>nwk_join</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nwk_join.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Init
</UL>

<P><STRONG><a name="[1e9]"></a>nwk_setJoinContext</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nwk_join.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinContext
</UL>

<P><STRONG><a name="[4c]"></a>nwk_processJoin</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nwk_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = nwk_processJoin &rArr; handleJoinRequest &rArr; smpl_send_join_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleJoinRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[1f0]"></a>nwk_joinList_init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, nwk_joinlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = nwk_joinList_init &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_DELAY
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
</UL>

<P><STRONG><a name="[1f5]"></a>nwk_joinList_deInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nwk_joinlist.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOnePage
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1f6]"></a>nwk_joinList_IPConflict</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nwk_joinlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nwk_joinList_IPConflict &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_assignIP
</UL>

<P><STRONG><a name="[1f7]"></a>nwk_joinList_assignIP</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, nwk_joinlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nwk_joinList_assignIP &rArr; nwk_joinList_IPConflict &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyIPAddress
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_IPConflict
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_add
</UL>

<P><STRONG><a name="[1f9]"></a>nwk_joinList_add</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, nwk_joinlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nwk_joinList_add &rArr; nwk_joinList_assignIP &rArr; nwk_joinList_IPConflict &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_assignIP
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_search
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_join_ed
</UL>

<P><STRONG><a name="[1fa]"></a>nwk_joinList_del</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nwk_joinlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_joinList_del &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_ed_connect
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_deleteInnetED
</UL>

<P><STRONG><a name="[1fb]"></a>nwk_joinList_save</STRONG> (Thumb, 166 bytes, Stack size 1024 bytes, nwk_joinlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076<LI>Call Chain = nwk_joinList_save &rArr; FLASH_WriteByte &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_join_ed
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_ed_connect
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_deleteInnetED
</UL>

<P><STRONG><a name="[1e1]"></a>nwk_joinList_isFound</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nwk_joinlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nwk_joinList_isFound &rArr; nwk_joinList_search &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_search
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
</UL>

<P><STRONG><a name="[1ff]"></a>nwk_joinList_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nwk_joinlist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getAPandTotalEDInfor
</UL>

<P><STRONG><a name="[1fd]"></a>nwk_joinList_searchIP</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nwk_joinlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nwk_joinList_searchIP &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_checkDuplicateLinkEdIPList
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_net_list
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[1fe]"></a>nwk_getAPandTotalEDInfor</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, nwk_joinlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nwk_getAPandTotalEDInfor
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_get
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ap_ed_mac_ip
</UL>

<P><STRONG><a name="[188]"></a>nwk_linkInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nwk_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_linkInit
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[1bd]"></a>nwk_setLinkToken</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nwk_link.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
</UL>

<P><STRONG><a name="[1be]"></a>nwk_getLinkToken</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nwk_link.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[1b6]"></a>nwk_unlink</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, nwk_link.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnection
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GetRadioState
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_ReplyDelay
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Unlink
</UL>

<P><STRONG><a name="[1b4]"></a>nwk_link</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, nwk_link.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyRxType
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getProtocolVersion
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_putNumObjectIntoMsg
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_allocateLocalRxPort
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnection
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNextConnection
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GetRadioState
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_ReplyDelay
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Link
</UL>

<P><STRONG><a name="[204]"></a>nwk_setDuplicateLinkFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nwk_link.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[203]"></a>nwk_setDuplicateLinkLid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_link.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
</UL>

<P><STRONG><a name="[4b]"></a>nwk_processLink</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nwk_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = nwk_processLink &rArr; handleLinkRequest &rArr; smpl_send_link_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLinkRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[1a8]"></a>nwk_setListenContext</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nwk_link.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLocalLinkID
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
</UL>

<P><STRONG><a name="[1a9]"></a>nwk_getLocalLinkID</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nwk_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nwk_getLocalLinkID
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setListenContext
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_LinkListen
</UL>

<P><STRONG><a name="[26e]"></a>nwk_getDuplicateLinkLid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_link.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_checkDuplicateLinkEdIPList
</UL>

<P><STRONG><a name="[179]"></a>nwk_clearDuplicateLinkFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nwk_link.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177]"></a>nwk_isExistDuplicateLinkED</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_link.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>nwk_mgmtInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nwk_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_mgmtInit
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[4f]"></a>nwk_processMgmt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nwk_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = nwk_processMgmt &rArr; smpl_send_mgmt_reply &rArr; send_poll_reply &rArr; nwk_SendEmptyPollRspFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_mgmt_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[1f3]"></a>nwk_resetSFMarker</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nwk_mgmt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>

<P><STRONG><a name="[185]"></a>nwk_pingInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nwk_ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nwk_pingInit
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[1b8]"></a>nwk_ping</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, nwk_ping.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GetRadioState
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_ReplyDelay
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_WakeUp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Sleep
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ping
</UL>

<P><STRONG><a name="[4a]"></a>nwk_processPing</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nwk_ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = nwk_processPing &rArr; handlePingRequest &rArr; smpl_send_ping_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_PostKillSem
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePingRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>nwk_securityInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nwk_security.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
</UL>

<P><STRONG><a name="[4d]"></a>nwk_processSecurity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nwk_security.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nwk_frame.o(.constdata)
</UL>
<P><STRONG><a name="[20c]"></a>proc_69_data_frm</STRONG> (Thumb, 326 bytes, Stack size 2384 bytes, 69_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8964<LI>Call Chain = proc_69_data_frm &rArr; proc_68_frm &rArr; proc_68_command_frm &rArr; net_status_proc &rArr; delete_ed_connect &rArr; SWSN_DeleteEDByMAC &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_NVIC_Configuration
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Configuration
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_88_frm
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_77_frm
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_frm
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_67_frm
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_gtway_data_ack
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_outnet_frm
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_gtway_alarm
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_gtway_msg_to_uart
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_inner_frame_len
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inner_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_frm_proc
</UL>

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usart_isr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = USART2_IRQHandler &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_NVIC_Configuration
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[217]"></a>bui_gtway_pkg</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, gtway_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bui_gtway_pkg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_frm_proc
</UL>

<P><STRONG><a name="[219]"></a>Reverse_trans_direction</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, gtway_frm_proc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_gtway_msg_from_gtway_frm_info
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_outnet_frm
</UL>

<P><STRONG><a name="[215]"></a>bui_outnet_frm</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, gtway_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bui_outnet_frm &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtawy_addr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reverse_trans_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_gtway_ack
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_gtway_data_ack
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_gtway_alarm
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_69_data_frm
</UL>

<P><STRONG><a name="[21b]"></a>bui_gtway_ack</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gtway_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bui_gtway_ack &rArr; bui_outnet_frm &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_outnet_frm
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_frm_proc
</UL>

<P><STRONG><a name="[21c]"></a>Bui_bcast_gtway_msg_from_inner_msg</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, gtway_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bui_bcast_gtway_msg_from_inner_msg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtawy_addr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_tx_ed_info
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_net_msg
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_gtway_alarm
</UL>

<P><STRONG><a name="[20e]"></a>bui_gtway_alarm</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, gtway_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bui_gtway_alarm &rArr; bui_outnet_frm &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bui_bcast_gtway_msg_from_inner_msg
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_outnet_frm
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_err_proc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_69_data_frm
</UL>

<P><STRONG><a name="[20f]"></a>Send_gtway_msg_to_uart</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gtway_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Send_gtway_msg_to_uart &rArr; put_multi_hex_uart2 &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_multi_hex_uart2
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_tx_ed_info
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_net_msg
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_err_proc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_frm_proc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_gtway_data_ack
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_69_data_frm
</UL>

<P><STRONG><a name="[210]"></a>pro_gtway_data_ack</STRONG> (Thumb, 198 bytes, Stack size 2360 bytes, gtway_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2736<LI>Call Chain = pro_gtway_data_ack &rArr; Send_gtway_msg_to_uart &rArr; put_multi_hex_uart2 &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_pkg_ack
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_app_pkg
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_77_pkg_ack
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_77_app_pkg
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_outnet_frm
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_gtway_msg_to_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_69_data_frm
</UL>

<P><STRONG><a name="[221]"></a>Bui_exception_msg</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, gtway_frm_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtawy_addr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
</UL>

<P><STRONG><a name="[222]"></a>Bui_send_to_cloudserver_msg</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, gtway_frm_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtawy_addr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Form_Verion_frame
</UL>

<P><STRONG><a name="[225]"></a>reserve_server_ip</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_frm_proc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_frm_proc
</UL>

<P><STRONG><a name="[223]"></a>gtway_info_check</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, uart_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gtway_info_check &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtawy_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_frm_proc
</UL>

<P><STRONG><a name="[224]"></a>uart_frm_proc</STRONG> (Thumb, 170 bytes, Stack size 2136 bytes, uart_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 11100<LI>Call Chain = uart_frm_proc &rArr; proc_69_data_frm &rArr; proc_68_frm &rArr; proc_68_command_frm &rArr; net_status_proc &rArr; delete_ed_connect &rArr; SWSN_DeleteEDByMAC &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtway_info_check
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_server_ip
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_gtway_ack
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_gtway_pkg
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_gtway_msg_to_uart
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_69_data_frm
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Usart2_DMA_FIFO
</UL>

<P><STRONG><a name="[22e]"></a>check_crc</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usart_share_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_usart2_frame_end_and_crc
</UL>

<P><STRONG><a name="[226]"></a>DMA_ResetCurrDataCounter</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usart_share_info.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>

<P><STRONG><a name="[234]"></a>NVIC_ClearPendingFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart2_dma_proc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[173]"></a>Usart2_DMA_Configuration</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, usart2_dma_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Usart2_DMA_Configuration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_usart2_buffer
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22c]"></a>usart2_err_proc</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, usart2_dma_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = usart2_err_proc &rArr; Send_gtway_msg_to_uart &rArr; put_multi_hex_uart2 &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_gtway_alarm
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_gtway_msg_to_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Usart2_DMA_FIFO
</UL>

<P><STRONG><a name="[22d]"></a>check_usart2_frame_end_and_crc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, usart2_dma_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = check_usart2_frame_end_and_crc &rArr; check_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Usart2_DMA_FIFO
</UL>

<P><STRONG><a name="[231]"></a>check_usart2_frame_head</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usart2_dma_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_usart2_frame_head
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Usart2_DMA_FIFO
</UL>

<P><STRONG><a name="[22f]"></a>read_Usart2_DMA_FIFO</STRONG> (Thumb, 518 bytes, Stack size 16 bytes, usart2_dma_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 11116<LI>Call Chain = read_Usart2_DMA_FIFO &rArr; uart_frm_proc &rArr; proc_69_data_frm &rArr; proc_68_frm &rArr; proc_68_command_frm &rArr; net_status_proc &rArr; delete_ed_connect &rArr; SWSN_DeleteEDByMAC &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_usart2_frame_head
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_usart2_frame_end_and_crc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_err_proc
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_frm_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_usart2_buffer
</UL>

<P><STRONG><a name="[216]"></a>TIM4_Configuration</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, usart2_dma_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TIM4_Configuration &rArr; TIM_ICInit &rArr; TI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectSlaveMode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, usart2_dma_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = TIM4_IRQHandler &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_NVIC_Configuration
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[390]"></a>usart_getFrameReceiveCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart2_dma_proc.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>Iterates_usart2_buffer</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, usart2_dma_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 11132<LI>Call Chain = Iterates_usart2_buffer &rArr; read_Usart2_DMA_FIFO &rArr; uart_frm_proc &rArr; proc_69_data_frm &rArr; proc_68_frm &rArr; proc_68_command_frm &rArr; net_status_proc &rArr; delete_ed_connect &rArr; SWSN_DeleteEDByMAC &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_DMA_Configuration
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Usart2_DMA_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[235]"></a>WriteCodeVersionInfoToFlash</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, firmware_info_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteCodeVersionInfoToFlash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_end_firmware_update
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_firmware_update
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCodeVersionInfo
</UL>

<P><STRONG><a name="[236]"></a>initCodeVersionInfo</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, firmware_info_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = initCodeVersionInfo &rArr; WriteCodeVersionInfoToFlash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCodeVersionInfoToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFirmwareInfo
</UL>

<P><STRONG><a name="[237]"></a>LoadMyAddressFromFlash</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, firmware_info_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoadMyAddressFromFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setMyType
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setMyAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ap_addr
</UL>

<P><STRONG><a name="[238]"></a>MyAddressInFlashIsValid</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, firmware_info_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MyAddressInFlashIsValid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ap_addr
</UL>

<P><STRONG><a name="[239]"></a>init_ap_addr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, firmware_info_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = init_ap_addr &rArr; MyAddressInFlashIsValid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyAddressInFlashIsValid
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadMyAddressFromFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFirmwareInfo
</UL>

<P><STRONG><a name="[23a]"></a>init_gtway_addr</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, firmware_info_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = init_gtway_addr &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFirmwareInfo
</UL>

<P><STRONG><a name="[16f]"></a>initFirmwareInfo</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, firmware_info_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = initFirmwareInfo &rArr; init_gtway_addr &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gtway_addr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ap_addr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCodeVersionInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23b]"></a>WritePerEDToFlash</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, firmware_info_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initpermissoned
</UL>

<P><STRONG><a name="[23c]"></a>initpermissoned</STRONG> (Thumb, 78 bytes, Stack size 120 bytes, firmware_info_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePerEDToFlash
</UL>

<P><STRONG><a name="[218]"></a>get_gtawy_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, firmware_info_proc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_gtway_msg_from_gtway_frm_info
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtway_type_mac
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_heart_frm
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtway_type_mac_77
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtway_info_check
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bui_send_to_cloudserver_msg
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bui_exception_msg
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bui_bcast_gtway_msg_from_inner_msg
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_outnet_frm
</UL>

<P><STRONG><a name="[241]"></a>get_gtawy_code_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, firmware_info_proc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_get_gtway_code_version
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Form_Verion_frame
</UL>

<P><STRONG><a name="[23d]"></a>WriteMyAddressToFlash</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, firmware_info_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WriteMyAddressToFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_my_device_address
</UL>

<P><STRONG><a name="[174]"></a>restoreFactorySettings</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, firmware_info_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = restoreFactorySettings &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23f]"></a>readSystemResetTimes</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, firmware_info_proc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemResetTimes
</UL>

<P><STRONG><a name="[23e]"></a>setSystemResetTimes</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, firmware_info_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSystemResetTimes
</UL>

<P><STRONG><a name="[240]"></a>Form_Verion_frame</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, firmware_info_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtawy_code_version
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bui_send_to_cloudserver_msg
</UL>

<P><STRONG><a name="[242]"></a>send_bcast_pkg</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, 68_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = send_bcast_pkg &rArr; send_bcast_msg &rArr; SMPL_SendOpt &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bcast_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bcast_frm
</UL>

<P><STRONG><a name="[212]"></a>proc_68_frm</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, 68_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6580<LI>Call Chain = proc_68_frm &rArr; proc_68_command_frm &rArr; net_status_proc &rArr; delete_ed_connect &rArr; SWSN_DeleteEDByMAC &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_data_frm
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_command_frm
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_ack_frm
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_alarm_frm
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_69_data_frm
</UL>

<P><STRONG><a name="[24c]"></a>send_net_pkg</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, 68_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = send_net_pkg &rArr; send_user_msg &rArr; SMPL_SendOpt &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_DELAY
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_user_msg
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_fail_ed_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_tx_fail_ed_buffer
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_tx_ed_info
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_ip_addr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_ed_connect
</UL>

<P><STRONG><a name="[24e]"></a>ap_inner_proc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ap_inner_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6340<LI>Call Chain = ap_inner_proc &rArr; net_status_proc &rArr; delete_ed_connect &rArr; SWSN_DeleteEDByMAC &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_def_proc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_status_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_net_msg
</UL>

<P><STRONG><a name="[21d]"></a>bui_app_pkg</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, bui_pkg_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bui_app_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_tx_ed_info
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_88_data_frm
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_88_command_frm
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_group_buffer
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_net_msg
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_ed_buffer
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_command_frm
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bcast_frm
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_gtway_data_ack
</UL>

<P><STRONG><a name="[21a]"></a>gen_crc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bui_pkg_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gen_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_tx_ed_info
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_gtway_frm_info_for_reply
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_gtway_msg_from_gtway_frm_info
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_time_sync_pkg
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_check_link_pkg
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_pkg_alarm
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_88_command
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_77_command
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debui_app_pkg
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Form_Verion_frame
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_pkg_ack
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_77_pkg_ack
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bui_send_to_cloudserver_msg
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bui_exception_msg
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bui_bcast_gtway_msg_from_inner_msg
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_outnet_frm
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_gtway_alarm
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_gtway_msg_to_uart
</UL>

<P><STRONG><a name="[24f]"></a>Debui_app_pkg</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, bui_pkg_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Debui_app_pkg &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_ip_addr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_ed_connect
</UL>

<P><STRONG><a name="[21f]"></a>bui_77_app_pkg</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, bui_pkg_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bui_77_app_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_77_command_frm
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_gtway_data_ack
</UL>

<P><STRONG><a name="[250]"></a>bui_rep_pkg_command</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, bui_pkg_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bui_rep_pkg_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_proc
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_system
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_link_token
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_net_info
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ed_info
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_join_ed
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ap_mac
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_ap
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ed_mac_and_ip
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_ip_addr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_ed_connect
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temoter_press_num
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_version
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_partnum
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whiting_proc
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviatn_proc
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manchter_proc
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_proc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_proc
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_proc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chanspc_proc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modformat_proc
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpw_proc
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rssi
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bandrate_proc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_type_proc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_firmware_update
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_firmware_update
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_my_device_address
</UL>

<P><STRONG><a name="[251]"></a>bui_rep_77_command</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, bui_pkg_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bui_rep_77_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ap_ed_mac_ip
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtway_type_mac_77
</UL>

<P><STRONG><a name="[252]"></a>bui_rep_88_command</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, bui_pkg_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bui_rep_88_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_heart_beat
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtway_type_mac
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_gtway_time
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_get_gtway_code_version
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_begin_firmware_update
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_end_firmware_update
</UL>

<P><STRONG><a name="[21e]"></a>bui_pkg_ack</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bui_pkg_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bui_pkg_ack &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bcast_frm
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_gtway_data_ack
</UL>

<P><STRONG><a name="[220]"></a>bui_77_pkg_ack</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bui_pkg_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bui_77_pkg_ack &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_gtway_data_ack
</UL>

<P><STRONG><a name="[253]"></a>bui_pkg_alarm</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, bui_pkg_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bui_pkg_alarm &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_tx_ed_info
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_88_data_frm
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_group_buffer
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_ip_addr
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_def_proc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_status_proc
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_para_proc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_ed_buffer
</UL>

<P><STRONG><a name="[254]"></a>bui_check_link_pkg</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bui_pkg_fun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
</UL>

<P><STRONG><a name="[255]"></a>bui_time_sync_pkg</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, bui_pkg_fun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_week
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
</UL>

<P><STRONG><a name="[49]"></a>sCB</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, net_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = sCB &rArr; Write_rx_ed_buffer &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TOGGLE_LED2
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_rx_ed_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_swsn_ap.o(.text)
</UL>
<P><STRONG><a name="[176]"></a>net_ed_link</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, net_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6228<LI>Call Chain = net_ed_link &rArr; add_net_list &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_LinkListen
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_resetUnlinkedED
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_net_list
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[259]"></a>proc_net_msg</STRONG> (Thumb, 144 bytes, Stack size 560 bytes, net_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6900<LI>Call Chain = proc_net_msg &rArr; ap_inner_proc &rArr; net_status_proc &rArr; delete_ed_connect &rArr; SWSN_DeleteEDByMAC &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_inner_proc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_app_pkg
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bui_bcast_gtway_msg_from_inner_msg
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_gtway_msg_to_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_bcast_frm
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_rx_ed_buffer
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_frm_proc
</UL>

<P><STRONG><a name="[25a]"></a>net_frm_proc</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, net_frm_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_user_msg
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_net_msg
</UL>

<P><STRONG><a name="[17a]"></a>proc_bcast_frm</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, net_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6964<LI>Call Chain = proc_bcast_frm &rArr; proc_net_msg &rArr; ap_inner_proc &rArr; net_status_proc &rArr; delete_ed_connect &rArr; SWSN_DeleteEDByMAC &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_bcast_msg
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_net_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25b]"></a>send_broad_time_sync</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, net_frm_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getFrameReceiveCount
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_getFrameTransmissionCount
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetCurrentState
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RESET_BOARD
</UL>

<P><STRONG><a name="[25e]"></a>SEGGER_RTT_print_all_ed_info</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, net_list_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SEGGER_RTT_print_all_ed_info &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_DELAY
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_list
</UL>

<P><STRONG><a name="[260]"></a>flash_to_head_list</STRONG> (Thumb, 238 bytes, Stack size 4120 bytes, net_list_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4140<LI>Call Chain = flash_to_head_list &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_list
</UL>

<P><STRONG><a name="[261]"></a>head_list_to_flash</STRONG> (Thumb, 246 bytes, Stack size 4128 bytes, net_list_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4148<LI>Call Chain = head_list_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_list
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_checkDuplicateLinkEdIPList
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_IP_by_MAC
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdel_mac
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_net_list
</UL>

<P><STRONG><a name="[171]"></a>init_list</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, net_list_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6196<LI>Call Chain = init_list &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_print_sysinfo
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinfo_from_flash
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinfo_to_flash
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_list_to_flash
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_head_list
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_print_all_ed_info
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_ip_conflict
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[268]"></a>ip_comp</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, net_list_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psearch_ip
</UL>

<P><STRONG><a name="[263]"></a>mac_comp</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, net_list_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mac_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psearch_mac
</UL>

<P><STRONG><a name="[262]"></a>psearch_mac</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, net_list_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = psearch_mac &rArr; mac_comp
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_checkDuplicateLinkEdIPList
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdel_mac
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_net_list
</UL>

<P><STRONG><a name="[258]"></a>add_net_list</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, net_list_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6212<LI>Call Chain = add_net_list &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinfo_to_flash
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getAddressByLinkId
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psearch_mac
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_list_to_flash
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_ip_conflict
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_searchIP
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_ed_link
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_checkDuplicateLinkEdIPList
</UL>

<P><STRONG><a name="[264]"></a>pdel_mac</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, net_list_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4172<LI>Call Chain = pdel_mac &rArr; head_list_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Free_tx_ed_buffer
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psearch_mac
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_list_to_flash
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_ip_conflict
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_ed_connect
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_deleteInnetED
</UL>

<P><STRONG><a name="[266]"></a>pdel_listNode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, net_list_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pdel_listNode &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_checkDuplicateLinkEdIPList
</UL>

<P><STRONG><a name="[391]"></a>print_all_ed_info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_list_proc.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>psearch_ip</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, net_list_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = psearch_ip &rArr; ip_comp
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_tx_ed_info
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_ip_addr
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rssi
</UL>

<P><STRONG><a name="[26f]"></a>psearch_id</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net_list_proc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_checkDuplicateLinkEdIPList
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ed_info
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ed_mac_and_ip
</UL>

<P><STRONG><a name="[269]"></a>Modify_IP_by_MAC</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, net_list_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4172<LI>Call Chain = Modify_IP_by_MAC &rArr; head_list_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_ip_in_tx_ed_buffer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_list_to_flash
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_ip_conflict
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_ip_addr
</UL>

<P><STRONG><a name="[26b]"></a>channr_num_to_flash</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, net_list_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>

<P><STRONG><a name="[392]"></a>channr_num_from_flash</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_list_proc.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>SWSN_deleteInnetED</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, net_list_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6196<LI>Call Chain = SWSN_deleteInnetED &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_DeleteEDByLid
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinfo_to_flash
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdel_mac
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_save
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_del
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_ed_connect
</UL>

<P><STRONG><a name="[178]"></a>SWSN_checkDuplicateLinkEdIPList</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, net_list_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6244<LI>Call Chain = SWSN_checkDuplicateLinkEdIPList &rArr; add_net_list &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getAddressByLinkId
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psearch_id
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdel_listNode
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psearch_mac
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_list_to_flash
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_listNode_insertNode
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_net_list
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getDuplicateLinkLid
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_searchIP
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27f]"></a>no_para_fun</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_para_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = no_para_fun
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_para_proc
</UL>

<P><STRONG><a name="[270]"></a>set_my_device_address</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, net_para_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = set_my_device_address &rArr; WriteMyAddressToFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMyAddressToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_para_proc
</UL>

<P><STRONG><a name="[271]"></a>end_firmware_update</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, net_para_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = end_firmware_update &rArr; bui_rep_pkg_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCodeVersionInfoToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_para_proc
</UL>

<P><STRONG><a name="[272]"></a>begin_firmware_update</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, net_para_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = begin_firmware_update &rArr; bui_rep_pkg_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_para_proc
</UL>

<P><STRONG><a name="[273]"></a>device_type_proc</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, net_para_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = device_type_proc &rArr; bui_rep_pkg_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_para_proc
</UL>

<P><STRONG><a name="[274]"></a>change_to_rate</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, net_para_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = change_to_rate &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bandrate_proc
</UL>

<P><STRONG><a name="[276]"></a>rate_to_arry</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, net_para_fun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bandrate_proc
</UL>

<P><STRONG><a name="[275]"></a>bandrate_proc</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, net_para_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bandrate_proc &rArr; change_to_rate &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_to_arry
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_to_rate
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_para_proc
</UL>

<P><STRONG><a name="[277]"></a>read_rssi</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, net_para_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = read_rssi &rArr; nwk_getEDRssi &rArr; SMPL_Ioctl &rArr; nwk_rawSend &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getEDRssi
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psearch_ip
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_para_proc
</UL>

<P><STRONG><a name="[278]"></a>txpw_proc</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, net_para_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = txpw_proc &rArr; Mrfi_SetProperty &rArr; Mrfi_SpiSendCommand &rArr; mrfi_SpiWriteBytes &rArr; mrfi_SpiWriteByte &rArr; bsp_SpiMasterTransmitByte &rArr; MRFI_Init &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Radio_Txpower
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SetProperty
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_para_proc
</UL>

<P><STRONG><a name="[279]"></a>modformat_proc</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, net_para_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = modformat_proc &rArr; Mrfi_SetProperty &rArr; Mrfi_SpiSendCommand &rArr; mrfi_SpiWriteBytes &rArr; mrfi_SpiWriteByte &rArr; bsp_SpiMasterTransmitByte &rArr; MRFI_Init &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Radio_mode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SetProperty
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_para_proc
</UL>

<P><STRONG><a name="[27a]"></a>chanspc_proc</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, net_para_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = chanspc_proc &rArr; Mrfi_SetProperty &rArr; Mrfi_SpiSendCommand &rArr; mrfi_SpiWriteBytes &rArr; mrfi_SpiWriteByte &rArr; bsp_SpiMasterTransmitByte &rArr; MRFI_Init &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SetProperty
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_para_proc
</UL>

<P><STRONG><a name="[27b]"></a>chan_proc</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, net_para_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = chan_proc &rArr; MRFI_SetChannelNum &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GetChannelNum
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_SetChannelNum
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_para_proc
</UL>

<P><STRONG><a name="[27d]"></a>freq_proc</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, net_para_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = freq_proc &rArr; Mrfi_SetProperty &rArr; Mrfi_SpiSendCommand &rArr; mrfi_SpiWriteBytes &rArr; mrfi_SpiWriteByte &rArr; bsp_SpiMasterTransmitByte &rArr; MRFI_Init &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Radio_fre
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SetProperty
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_para_proc
</UL>

<P><STRONG><a name="[248]"></a>net_para_proc</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, net_para_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = net_para_proc &rArr; read_rssi &rArr; nwk_getEDRssi &rArr; SMPL_Ioctl &rArr; nwk_rawSend &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_proc
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chan_proc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chanspc_proc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modformat_proc
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpw_proc
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rssi
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bandrate_proc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_type_proc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_firmware_update
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_firmware_update
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_my_device_address
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_para_fun
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_pkg_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_command_frm
</UL>

<P><STRONG><a name="[280]"></a>rate_proc</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, net_para_fun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SetProperty
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>

<P><STRONG><a name="[281]"></a>manchter_proc</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, net_para_fun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetProperty
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SetProperty
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>

<P><STRONG><a name="[282]"></a>deviatn_proc</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, net_para_fun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetProperty
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SetProperty
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>

<P><STRONG><a name="[283]"></a>whiting_proc</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, net_para_fun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetProperty
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SetProperty
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>

<P><STRONG><a name="[284]"></a>read_partnum</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, net_para_fun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetPartInfo
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>

<P><STRONG><a name="[285]"></a>read_version</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, net_para_fun.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetPartInfo
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>

<P><STRONG><a name="[292]"></a>no_status_fun</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_status_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = no_status_fun
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_status_proc
</UL>

<P><STRONG><a name="[286]"></a>read_temoter_press_num</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, net_status_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_temoter_press_num &rArr; bui_rep_pkg_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_status_proc
</UL>

<P><STRONG><a name="[287]"></a>delete_ed_connect</STRONG> (Thumb, 148 bytes, Stack size 88 bytes, net_status_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6284<LI>Call Chain = delete_ed_connect &rArr; SWSN_DeleteEDByMAC &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_DeleteEDByMAC
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLinkIdByAddress
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_deleteInnetED
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdel_mac
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debui_app_pkg
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_pkg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_save
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_del
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_status_proc
</UL>

<P><STRONG><a name="[288]"></a>modify_ip_addr</STRONG> (Thumb, 184 bytes, Stack size 112 bytes, net_status_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4284<LI>Call Chain = modify_ip_addr &rArr; Modify_IP_by_MAC &rArr; head_list_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLinkIdByAddress
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_IP_by_MAC
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psearch_ip
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_pkg_alarm
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debui_app_pkg
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_status_proc
</UL>

<P><STRONG><a name="[289]"></a>get_ed_mac_and_ip</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, net_status_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_ed_mac_and_ip &rArr; bui_rep_pkg_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psearch_id
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_status_proc
</UL>

<P><STRONG><a name="[28a]"></a>reset_ap</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, net_status_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = reset_ap &rArr; bui_rep_pkg_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_status_proc
</UL>

<P><STRONG><a name="[28b]"></a>get_ap_mac</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, net_status_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_ap_mac &rArr; bui_rep_pkg_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyAddress
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_status_proc
</UL>

<P><STRONG><a name="[28c]"></a>set_join_ed</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, net_status_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124<LI>Call Chain = set_join_ed &rArr; nwk_joinList_save &rArr; FLASH_WriteByte &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_save
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_add
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_status_proc
</UL>

<P><STRONG><a name="[28d]"></a>get_ed_info</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, net_status_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_ed_info &rArr; bui_rep_pkg_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getEDbasicInfo
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psearch_id
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_status_proc
</UL>

<P><STRONG><a name="[28e]"></a>get_net_info</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, net_status_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_net_info &rArr; bui_rep_pkg_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getEDState
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_status_proc
</UL>

<P><STRONG><a name="[290]"></a>get_join_link_token</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, net_status_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_join_link_token &rArr; bui_rep_pkg_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_status_proc
</UL>

<P><STRONG><a name="[291]"></a>reset_system</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, net_status_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = reset_system &rArr; bui_rep_pkg_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_status_proc
</UL>

<P><STRONG><a name="[249]"></a>net_status_proc</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, net_status_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6316<LI>Call Chain = net_status_proc &rArr; delete_ed_connect &rArr; SWSN_DeleteEDByMAC &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_system
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_link_token
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_net_info
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ed_info
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_join_ed
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ap_mac
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_ap
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ed_mac_and_ip
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_ip_addr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_ed_connect
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temoter_press_num
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_status_fun
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_pkg_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_inner_proc
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_command_frm
</UL>

<P><STRONG><a name="[294]"></a>no_user_fun</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, user_def_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = no_user_fun
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_def_proc
</UL>

<P><STRONG><a name="[293]"></a>time_proc</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, user_def_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = time_proc &rArr; Time_Set &rArr; Time_Update &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_week
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_pkg_command
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_def_proc
</UL>

<P><STRONG><a name="[24a]"></a>user_def_proc</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, user_def_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = user_def_proc &rArr; time_proc &rArr; Time_Set &rArr; Time_Update &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_proc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_user_fun
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_pkg_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_inner_proc
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_command_frm
</UL>

<P><STRONG><a name="[295]"></a>write_group_buffer</STRONG> (Thumb, 226 bytes, Stack size 248 bytes, 67_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = write_group_buffer &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_pkg_alarm
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_app_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_67_frm
</UL>

<P><STRONG><a name="[211]"></a>proc_67_frm</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, 67_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = proc_67_frm &rArr; write_group_buffer &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_group_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_69_data_frm
</UL>

<P><STRONG><a name="[2b0]"></a>Change_67frm_to_68frm</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, 67_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Change_67frm_to_68frm
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_ed_buffer
</UL>

<P><STRONG><a name="[296]"></a>Change_67frm_to_69frm</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, 67_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Change_67frm_to_69frm &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_67frm_to_ed_tx_buffer
</UL>

<P><STRONG><a name="[17c]"></a>write_67frm_to_ed_tx_buffer</STRONG> (Thumb, 258 bytes, Stack size 2112 bytes, 67_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440<LI>Call Chain = write_67frm_to_ed_tx_buffer &rArr; Write_tx_ed_buffer &rArr; bui_pkg_alarm &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isReadyToWriteGroupFrm
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_67frm_to_69frm
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_ed_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29d]"></a>proc_77_alarm_frm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 77_frm_proc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_77_frm
</UL>

<P><STRONG><a name="[29c]"></a>proc_77_ack_frm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 77_frm_proc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_77_frm
</UL>

<P><STRONG><a name="[298]"></a>get_gtway_type_mac_77</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, 77_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_gtway_type_mac_77 &rArr; bui_rep_77_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_77_command
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtawy_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_77_command_frm
</UL>

<P><STRONG><a name="[299]"></a>get_ap_ed_mac_ip</STRONG> (Thumb, 52 bytes, Stack size 720 bytes, 77_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = get_ap_ed_mac_ip &rArr; bui_rep_77_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_77_command
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getAPandTotalEDInfor
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_77_command_frm
</UL>

<P><STRONG><a name="[29a]"></a>proc_77_command_frm</STRONG> (Thumb, 60 bytes, Stack size 2072 bytes, 77_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2832<LI>Call Chain = proc_77_command_frm &rArr; get_ap_ed_mac_ip &rArr; bui_rep_77_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ap_ed_mac_ip
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtway_type_mac_77
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_77_app_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_77_frm
</UL>

<P><STRONG><a name="[29b]"></a>proc_77_data_frm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 77_frm_proc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_77_frm
</UL>

<P><STRONG><a name="[214]"></a>proc_77_frm</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, 77_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2856<LI>Call Chain = proc_77_frm &rArr; proc_77_command_frm &rArr; get_ap_ed_mac_ip &rArr; bui_rep_77_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_77_data_frm
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_77_command_frm
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_77_ack_frm
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_77_alarm_frm
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_69_data_frm
</UL>

<P><STRONG><a name="[2ab]"></a>proc_88_alarm_frm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 88_frm_proc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_88_frm
</UL>

<P><STRONG><a name="[2aa]"></a>proc_88_ack_frm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 88_frm_proc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_88_frm
</UL>

<P><STRONG><a name="[2a8]"></a>sw_gtway_88_proc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, 88_frm_proc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_88_command_frm
</UL>

<P><STRONG><a name="[29e]"></a>check_wifi_heart_frm</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, 88_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = check_wifi_heart_frm &rArr; BSP_RESET_BOARD &rArr; WWDG_SetWindowValue
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RESET_BOARD
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtawy_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_frm_proc
</UL>

<P><STRONG><a name="[29f]"></a>server_end_firmware_update</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, 88_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = server_end_firmware_update &rArr; bui_rep_88_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_88_command
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCodeVersionInfoToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_frm_proc
</UL>

<P><STRONG><a name="[2a0]"></a>server_begin_firmware_update</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, 88_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = server_begin_firmware_update &rArr; bui_rep_88_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_88_command
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_frm_proc
</UL>

<P><STRONG><a name="[2a1]"></a>server_get_gtway_code_version</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, 88_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = server_get_gtway_code_version &rArr; bui_rep_88_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_88_command
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtawy_code_version
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_frm_proc
</UL>

<P><STRONG><a name="[2a2]"></a>sync_gtway_time</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, 88_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sync_gtway_time &rArr; Time_Set &rArr; Time_Update &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_88_command
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_frm_proc
</UL>

<P><STRONG><a name="[2a3]"></a>get_gtway_type_mac</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, 88_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_gtway_type_mac &rArr; bui_rep_88_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_88_command
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtawy_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_frm_proc
</UL>

<P><STRONG><a name="[2a4]"></a>check_heart_beat</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, 88_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = check_heart_beat &rArr; bui_rep_88_command &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_rep_88_command
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_frm_proc
</UL>

<P><STRONG><a name="[2a5]"></a>server_frm_proc</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, 88_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = server_frm_proc &rArr; sync_gtway_time &rArr; Time_Set &rArr; Time_Update &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_heart_beat
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtway_type_mac
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_gtway_time
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_get_gtway_code_version
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_begin_firmware_update
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_end_firmware_update
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_heart_frm
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_gtway_88_proc
</UL>

<P><STRONG><a name="[2a6]"></a>com_gtway_88_proc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, 88_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = com_gtway_88_proc &rArr; server_frm_proc &rArr; sync_gtway_time &rArr; Time_Set &rArr; Time_Update &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_frm_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_88_command_frm
</UL>

<P><STRONG><a name="[2a7]"></a>proc_88_command_frm</STRONG> (Thumb, 56 bytes, Stack size 232 bytes, 88_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = proc_88_command_frm &rArr; com_gtway_88_proc &rArr; server_frm_proc &rArr; sync_gtway_time &rArr; Time_Set &rArr; Time_Update &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_gtway_88_proc
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_gtway_88_proc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_app_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_88_frm
</UL>

<P><STRONG><a name="[2a9]"></a>proc_88_data_frm</STRONG> (Thumb, 552 bytes, Stack size 240 bytes, 88_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = proc_88_data_frm &rArr; FLASH_WriteByte &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_BootLoader_State
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteByte
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_pkg_alarm
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_app_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_88_frm
</UL>

<P><STRONG><a name="[213]"></a>proc_88_frm</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, 88_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = proc_88_frm &rArr; proc_88_command_frm &rArr; com_gtway_88_proc &rArr; server_frm_proc &rArr; sync_gtway_time &rArr; Time_Set &rArr; Time_Update &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_88_data_frm
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_88_command_frm
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_88_ack_frm
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_88_alarm_frm
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_69_data_frm
</UL>

<P><STRONG><a name="[257]"></a>Write_rx_ed_buffer</STRONG> (Thumb, 410 bytes, Stack size 144 bytes, ed_rx_buffer_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Write_rx_ed_buffer &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_put_multi_char
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_user_msg
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sCB
</UL>

<P><STRONG><a name="[17e]"></a>Iterates_rx_ed_buffer</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ed_rx_buffer_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6916<LI>Call Chain = Iterates_rx_ed_buffer &rArr; proc_net_msg &rArr; ap_inner_proc &rArr; net_status_proc &rArr; delete_ed_connect &rArr; SWSN_DeleteEDByMAC &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_net_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>Find_ed_info_in_rx_buffer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ed_rx_buffer_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Find_ed_info_in_rx_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[245]"></a>Write_tx_ed_buffer</STRONG> (Thumb, 232 bytes, Stack size 288 bytes, ed_tx_buffer_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Write_tx_ed_buffer &rArr; bui_pkg_alarm &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_ip_in_ed_tx_buffer
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_ed_in_ed_tx_buffer
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_a_avaliable_ed_tx_info
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_a_ed_tx_info
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_67frm_to_68frm
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_pkg_alarm
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_app_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_67frm_to_ed_tx_buffer
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_data_frm
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_command_frm
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_ack_frm
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_alarm_frm
</UL>

<P><STRONG><a name="[17d]"></a>Iterates_tx_ed_buffer</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, ed_tx_buffer_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = Iterates_tx_ed_buffer &rArr; proc_tx_ed_info &rArr; send_net_pkg &rArr; send_user_msg &rArr; SMPL_SendOpt &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_tx_ed_info
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26a]"></a>Modify_ip_in_tx_ed_buffer</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ed_tx_buffer_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Modify_ip_in_tx_ed_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_IP_by_MAC
</UL>

<P><STRONG><a name="[265]"></a>Free_tx_ed_buffer</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, ed_tx_buffer_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Free_tx_ed_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdel_mac
</UL>

<P><STRONG><a name="[297]"></a>isReadyToWriteGroupFrm</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ed_tx_buffer_fun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_67frm_to_ed_tx_buffer
</UL>

<P><STRONG><a name="[24d]"></a>Write_tx_fail_ed_buffer</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, ed_tx_fail_buffer_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Write_tx_fail_ed_buffer &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_pkg
</UL>

<P><STRONG><a name="[17f]"></a>Iterates_tx_fail_ed_buffer</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, ed_tx_fail_buffer_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = Iterates_tx_fail_ed_buffer &rArr; send_net_pkg &rArr; send_user_msg &rArr; SMPL_SendOpt &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>Find_ed_info_in_tx_fail_buffer</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ed_tx_fail_buffer_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Find_ed_info_in_tx_fail_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[393]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Read
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_replayRmoterFrame
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_retrieveFrame
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Receive
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_gtway_msg_from_gtway_frm_info
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_a_ed_tx_info
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_67frm_to_69frm
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_group_buffer
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_rx_ed_buffer
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_fail_ed_buffer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Usart2_DMA_FIFO
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bui_send_to_cloudserver_msg
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bui_bcast_gtway_msg_from_inner_msg
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_gtway_pkg
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_outnet_frm
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_gtway_alarm
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inner_frame
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_InitRadioRegisters
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_to_rate
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_rx_ed_buffer
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Form_Verion_frame
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_putNumObjectIntoMsg
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNumObjectFromMsg
</UL>

<P><STRONG><a name="[394]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bui_send_to_cloudserver_msg
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bui_exception_msg
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bui_bcast_gtway_msg_from_inner_msg
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_save
</UL>

<P><STRONG><a name="[396]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_connectionControl
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_DeleteEDByMAC
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_info_in_sysinfo
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_linkInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_resetUnlinkedED
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_nwkInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_usart2_buffer
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_LoRaRxPacket
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Usart2_DMA_FIFO
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_deInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_init
</UL>

<P><STRONG><a name="[19a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinfo_from_flash
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinfo_to_flash
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_allocateLocalRxPort
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_67frm_to_ed_tx_buffer
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ap_ed_mac_ip
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_list_to_flash
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_head_list
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_net_msg
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initpermissoned
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_69_data_frm
</UL>

<P><STRONG><a name="[398]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[190]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getAPAddress
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QfindOldest
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSandFFrame
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDupSandFFrame
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatchFrame
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_DeleteEDByMAC
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findPeer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isValidReply
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_allocateLocalRxPort
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findAlreadyJoined
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_saveJoinedDevice
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLinkIdByAddress
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findAddressMatch
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isLinkDuplicate
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_wifi_heart_frm
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_IP_by_MAC
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_listNode_insertNode
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_ip_conflict
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_fail_ed_buffer
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyAddressInFlashIsValid
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtway_info_check
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_searchIP
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_del
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_IPConflict
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_search
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_init
</UL>

<P><STRONG><a name="[51]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[399]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[39d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[39e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1e2]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdel_listNode
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdel_mac
</UL>

<P><STRONG><a name="[1e0]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_list
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_head_list
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_net_list
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[53]"></a>SetSysClockTo72</STRONG> (Thumb, 264 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[52]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[78]"></a>TI4_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[76]"></a>TI3_Config</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[74]"></a>TI2_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[72]"></a>TI1_Config</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[8c]"></a>_strlen</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, segger_rtt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
</UL>

<P><STRONG><a name="[88]"></a>_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, segger_rtt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigDownBuffer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_HasKey
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Read
</UL>

<P><STRONG><a name="[95]"></a>_StoreChar</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, segger_rtt_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>

<P><STRONG><a name="[96]"></a>_PrintUnsigned</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, segger_rtt_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[97]"></a>_PrintInt</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, segger_rtt_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[111]"></a>Mrfi_DelayUsec</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mrfi_DelayUsec &rArr; BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_DelayMs
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RSSI_VALID_WAIT
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_RandomBackoffDelay
</UL>

<P><STRONG><a name="[112]"></a>Mrfi_RandomBackoffDelay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mrfi_RandomBackoffDelay &rArr; Mrfi_DelayUsec &rArr; BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RandomByte
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Transmit
</UL>

<P><STRONG><a name="[125]"></a>Mrfi_SyncPinRxIsr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_GpioIsr
</UL>

<P><STRONG><a name="[122]"></a>Mrfi_ReadyMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Ready
</UL>

<P><STRONG><a name="[126]"></a>bsp_SpiMasterTransmitByte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsp_SpiMasterTransmitByte &rArr; MRFI_Init &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxOn
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_SpiWriteByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_SpiReadByte
</UL>

<P><STRONG><a name="[127]"></a>mrfi_SpiReadByte</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiMasterTransmitByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiGetResponse
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_SpiReadBytes
</UL>

<P><STRONG><a name="[128]"></a>mrfi_SpiReadBytes</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_SpiReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiGetResponse
</UL>

<P><STRONG><a name="[129]"></a>mrfi_SpiWriteByte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mrfi_SpiWriteByte &rArr; bsp_SpiMasterTransmitByte &rArr; MRFI_Init &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SpiMasterTransmitByte
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiReadData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiWriteData
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiGetResponse
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_SpiWriteBytes
</UL>

<P><STRONG><a name="[12b]"></a>mrfi_SpiWriteBytes</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mrfi_SpiWriteBytes &rArr; mrfi_SpiWriteByte &rArr; bsp_SpiMasterTransmitByte &rArr; MRFI_Init &rArr; MRFI_RxOn &rArr; RE_ON &rArr; SX1276_LoRaEntryRx &rArr; SX1276_Standby &rArr; SPIRead &rArr; ReadOneByte &rArr; write1byte_to_sx1278
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrfi_SpiWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiWriteData
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_SpiSendCommand
</UL>

<P><STRONG><a name="[12f]"></a>MRFI_RSSI_VALID_WAIT</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_IsRssiExceededThreshold
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_DelayUsec
</UL>

<P><STRONG><a name="[132]"></a>Mrfi_DelayUsecSem</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mrfi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mrfi_DelayUsecSem &rArr; BSP_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Delay
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_ReplyDelay
</UL>

<P><STRONG><a name="[136]"></a>Mrfi_CalculateCrc</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_IsCrcError
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_FillCrc
</UL>

<P><STRONG><a name="[135]"></a>Mrfi_FillCrc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_CalculateCrc
</UL>

<P><STRONG><a name="[137]"></a>Mrfi_IsCrcError</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_CalculateCrc
</UL>

<P><STRONG><a name="[13e]"></a>Mrfi_SendPackage</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ChangeToReadyState
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ClearAllInterruptFlags
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ResetTxFifo
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_WriteTxFifo
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_StartTx
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[145]"></a>Mrfi_WaitForTransmitDone</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_GetPacketHandlerStatus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_DelayMs
</UL>

<P><STRONG><a name="[14a]"></a>Mrfi_InitRadioRegisters</STRONG> (Thumb, 268 bytes, Stack size 456 bytes, mrfi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mrfi_ConfigurationInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[18c]"></a>map_lid2idx</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = map_lid2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getEDbasicInfo
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getConnInfo
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeConnection
</UL>

<P><STRONG><a name="[18b]"></a>initializeConnection</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nwk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = initializeConnection &rArr; map_lid2idx
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_lid2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findAlreadyJoined
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNextConnection
</UL>

<P><STRONG><a name="[1bc]"></a>ioctlPreInitAccessIsOK</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nwk_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMPL_Ioctl
</UL>

<P><STRONG><a name="[1de]"></a>dispatchFrame</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, nwk_frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = dispatchFrame &rArr; nwk_isConnectionValid &rArr; nwk_sendAckReply &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getRemoterAddress
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_replayRmoterFrame
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDupSandFFrame
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getBCastAddress
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isConnectionValid
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRFI_RxCompleteISR
</UL>

<P><STRONG><a name="[1ef]"></a>generateLinkToken</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nwk_join.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinInit
</UL>

<P><STRONG><a name="[1f2]"></a>smpl_send_join_reply</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, nwk_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = smpl_send_join_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getProtocolVersion
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getLinkToken
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_putNumObjectIntoMsg
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNumObjectFromMsg
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_saveJoinedDevice
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_resetSFMarker
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleJoinRequest
</UL>

<P><STRONG><a name="[1f4]"></a>handleJoinRequest</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nwk_join.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = handleJoinRequest &rArr; smpl_send_join_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_join_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processJoin
</UL>

<P><STRONG><a name="[1f8]"></a>nwk_joinList_search</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nwk_joinlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nwk_joinList_search &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_isFound
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_add
</UL>

<P><STRONG><a name="[201]"></a>smpl_send_unlink_reply</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nwk_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = smpl_send_unlink_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findPeer
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLinkRequest
</UL>

<P><STRONG><a name="[202]"></a>smpl_send_link_reply</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, nwk_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = smpl_send_link_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getMyRxType
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getProtocolVersion
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNumObjectFromMsg
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_allocateLocalRxPort
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_findAlreadyJoined
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isLinkDuplicate
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_freeConnection
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getNextConnection
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setDuplicateLinkLid
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_setDuplicateLinkFlag
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_joinList_searchIP
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleLinkRequest
</UL>

<P><STRONG><a name="[205]"></a>handleLinkRequest</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nwk_link.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = handleLinkRequest &rArr; smpl_send_link_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_link_reply
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_unlink_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processLink
</UL>

<P><STRONG><a name="[206]"></a>send_poll_reply</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, nwk_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = send_poll_reply &rArr; nwk_SendEmptyPollRspFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_QadjustOrder
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_SendEmptyPollRspFrame
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_getSandFFrame
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_isSandFClient
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_checkAppMsgTID
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_mgmt_reply
</UL>

<P><STRONG><a name="[208]"></a>smpl_send_mgmt_reply</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nwk_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = smpl_send_mgmt_reply &rArr; send_poll_reply &rArr; nwk_SendEmptyPollRspFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_poll_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processMgmt
</UL>

<P><STRONG><a name="[209]"></a>smpl_send_ping_reply</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nwk_ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = smpl_send_ping_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_sendFrame
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_buildFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlePingRequest
</UL>

<P><STRONG><a name="[20a]"></a>handlePingRequest</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nwk_ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = handlePingRequest &rArr; smpl_send_ping_reply &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpl_send_ping_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nwk_processPing
</UL>

<P><STRONG><a name="[20b]"></a>get_inner_frame</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, 69_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_inner_frame &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_69_data_frm
</UL>

<P><STRONG><a name="[20d]"></a>check_inner_frame_len</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, 69_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_inner_frame_len
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_69_data_frm
</UL>

<P><STRONG><a name="[243]"></a>send_bcast_frm</STRONG> (Thumb, 92 bytes, Stack size 248 bytes, 68_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = send_bcast_frm &rArr; send_bcast_pkg &rArr; send_bcast_msg &rArr; SMPL_SendOpt &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_DELAY
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bcast_pkg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_pkg_ack
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_app_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_data_frm
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_command_frm
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_ack_frm
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_alarm_frm
</UL>

<P><STRONG><a name="[244]"></a>proc_68_alarm_frm</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, 68_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = proc_68_alarm_frm &rArr; send_bcast_frm &rArr; send_bcast_pkg &rArr; send_bcast_msg &rArr; SMPL_SendOpt &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_ed_buffer
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bcast_frm
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_frm
</UL>

<P><STRONG><a name="[246]"></a>proc_68_ack_frm</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, 68_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = proc_68_ack_frm &rArr; send_bcast_frm &rArr; send_bcast_pkg &rArr; send_bcast_msg &rArr; SMPL_SendOpt &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_ed_buffer
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bcast_frm
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_frm
</UL>

<P><STRONG><a name="[247]"></a>proc_68_command_frm</STRONG> (Thumb, 144 bytes, Stack size 240 bytes, 68_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6556<LI>Call Chain = proc_68_command_frm &rArr; net_status_proc &rArr; delete_ed_connect &rArr; SWSN_DeleteEDByMAC &rArr; sysinfo_to_flash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_def_proc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_status_proc
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_para_proc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_ed_buffer
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bcast_frm
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_app_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_frm
</UL>

<P><STRONG><a name="[24b]"></a>proc_68_data_frm</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, 68_frm_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = proc_68_data_frm &rArr; send_bcast_frm &rArr; send_bcast_pkg &rArr; send_bcast_msg &rArr; SMPL_SendOpt &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_ed_buffer
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bcast_frm
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_68_frm
</UL>

<P><STRONG><a name="[25f]"></a>detect_ip_conflict</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, net_list_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = detect_ip_conflict &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_list
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modify_IP_by_MAC
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdel_mac
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_net_list
</UL>

<P><STRONG><a name="[26d]"></a>compare_listNode_insertNode</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, net_list_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = compare_listNode_insertNode &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWSN_checkDuplicateLinkEdIPList
</UL>

<P><STRONG><a name="[2ac]"></a>write_a_ed_tx_info</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ed_tx_buffer_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_a_ed_tx_info &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_ed_buffer
</UL>

<P><STRONG><a name="[2af]"></a>find_a_avaliable_ed_tx_info</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ed_tx_buffer_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_a_avaliable_ed_tx_info
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_ed_buffer
</UL>

<P><STRONG><a name="[2ae]"></a>add_new_ed_in_ed_tx_buffer</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ed_tx_buffer_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add_new_ed_in_ed_tx_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_ed_buffer
</UL>

<P><STRONG><a name="[2ad]"></a>search_ip_in_ed_tx_buffer</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ed_tx_buffer_fun.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_tx_ed_buffer
</UL>

<P><STRONG><a name="[2b1]"></a>bui_gtway_msg_from_gtway_frm_info</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, ed_tx_buffer_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bui_gtway_msg_from_gtway_frm_info &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gtawy_addr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reverse_trans_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_tx_ed_info
</UL>

<P><STRONG><a name="[2b2]"></a>change_gtway_frm_info_for_reply</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ed_tx_buffer_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = change_gtway_frm_info_for_reply &rArr; gen_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_tx_ed_info
</UL>

<P><STRONG><a name="[2b3]"></a>proc_tx_ed_info</STRONG> (Thumb, 230 bytes, Stack size 416 bytes, ed_tx_buffer_fun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = proc_tx_ed_info &rArr; send_net_pkg &rArr; send_user_msg &rArr; SMPL_SendOpt &rArr; nwk_sendFrame &rArr; MRFI_Transmit &rArr; Lora_RSSI_VALID_WAIT &rArr; Lora_Rssiv_judge &rArr; SEGGER_RTT_put_multi_char &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_gtway_frm_info_for_reply
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_gtway_msg_from_gtway_frm_info
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psearch_ip
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_pkg_alarm
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_net_pkg
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_crc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bui_app_pkg
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bui_bcast_gtway_msg_from_inner_msg
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_gtway_msg_to_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iterates_tx_ed_buffer
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
